
DATN_STM32_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b4  080059b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059bc  080059bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080059c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000374  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f1ed  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002077  00000000  00000000  0002f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc8  00000000  00000000  00031338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac8  00000000  00000000  00032100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b4d  00000000  00000000  00032bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010432  00000000  00000000  00054715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce24b  00000000  00000000  00064b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f64  00000000  00000000  00132d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00136cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005934 	.word	0x08005934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005934 	.word	0x08005934

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//===============FUNCTION INTERRUPT TIMER1 (checked)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800057a:	f002 f948 	bl	800280e <HAL_GPIO_TogglePin>
	if(htim->Instance == TIM1)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d102      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		flag_timer1 = true;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00
 800059c:	40010000 	.word	0x40010000
 80005a0:	2000027e 	.word	0x2000027e

080005a4 <delay_us>:
//===============FUNCTION INTERRUPT TIMER2 (checked)
void delay_us(uint16_t us)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <delay_us+0x30>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80005b6:	bf00      	nop
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <delay_us+0x30>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3f9      	bcc.n	80005b8 <delay_us+0x14>
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000198 	.word	0x20000198

080005d8 <HAL_UART_RxCpltCallback>:

//===============FUNCTION INTERRUPT UART (checked)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80005e0:	222b      	movs	r2, #43	; 0x2b
 80005e2:	491c      	ldr	r1, [pc, #112]	; (8000654 <HAL_UART_RxCpltCallback+0x7c>)
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <HAL_UART_RxCpltCallback+0x80>)
 80005e6:	f003 fb8e 	bl	8003d06 <HAL_UART_Receive_IT>
	if(Data_UART_Receive[42] == 's')
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <HAL_UART_RxCpltCallback+0x7c>)
 80005ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80005f0:	2b73      	cmp	r3, #115	; 0x73
 80005f2:	d10b      	bne.n	800060c <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <HAL_UART_RxCpltCallback+0x84>)
 80005fa:	f002 f908 	bl	800280e <HAL_GPIO_TogglePin>
		StateUART = DATA_UART_AVAILABLE;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_UART_RxCpltCallback+0x88>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
		Data_UART_Receive_Lenght = 43;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_UART_RxCpltCallback+0x8c>)
 8000606:	222b      	movs	r2, #43	; 0x2b
 8000608:	701a      	strb	r2, [r3, #0]
	{
		StateUART = DATA_UART_UNAVAILABLE;
		for(int i = 0; i < 43; i++)
			Data_UART_Receive[i] = ' ';
	}
}
 800060a:	e01e      	b.n	800064a <HAL_UART_RxCpltCallback+0x72>
	else if(Data_UART_Receive[42] == 'r') // Lenh Reset he thong
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_UART_RxCpltCallback+0x7c>)
 800060e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000612:	2b72      	cmp	r3, #114	; 0x72
 8000614:	d108      	bne.n	8000628 <HAL_UART_RxCpltCallback+0x50>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <HAL_UART_RxCpltCallback+0x84>)
 800061c:	f002 f8f7 	bl	800280e <HAL_GPIO_TogglePin>
		Flag_Reset = true;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_UART_RxCpltCallback+0x90>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	e010      	b.n	800064a <HAL_UART_RxCpltCallback+0x72>
		StateUART = DATA_UART_UNAVAILABLE;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_UART_RxCpltCallback+0x88>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e007      	b.n	8000644 <HAL_UART_RxCpltCallback+0x6c>
			Data_UART_Receive[i] = ' ';
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_UART_RxCpltCallback+0x7c>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	2220      	movs	r2, #32
 800063c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b2a      	cmp	r3, #42	; 0x2a
 8000648:	ddf4      	ble.n	8000634 <HAL_UART_RxCpltCallback+0x5c>
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000224 	.word	0x20000224
 8000658:	200001e0 	.word	0x200001e0
 800065c:	40020c00 	.word	0x40020c00
 8000660:	2000027b 	.word	0x2000027b
 8000664:	2000024f 	.word	0x2000024f
 8000668:	2000027d 	.word	0x2000027d

0800066c <HAL_CAN_RxFifo0MsgPendingCallback>:
//===============FUNCTION INTERRUPT CAN MESSAGE (checked)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RX_CAN_HEADER, Data_CAN_Rx) == HAL_OK)
 8000674:	4b81      	ldr	r3, [pc, #516]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000676:	4a82      	ldr	r2, [pc, #520]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000678:	2100      	movs	r1, #0
 800067a:	4882      	ldr	r0, [pc, #520]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800067c:	f001 fa07 	bl	8001a8e <HAL_CAN_GetRxMessage>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 80f6 	bne.w	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068c:	487e      	ldr	r0, [pc, #504]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800068e:	f002 f8be 	bl	800280e <HAL_GPIO_TogglePin>
		switch(RX_CAN_HEADER.StdId)
 8000692:	4b7b      	ldr	r3, [pc, #492]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	2b1f      	cmp	r3, #31
 800069a:	f200 80eb 	bhi.w	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	08000725 	.word	0x08000725
 80006a8:	0800075d 	.word	0x0800075d
 80006ac:	08000875 	.word	0x08000875
 80006b0:	08000795 	.word	0x08000795
 80006b4:	08000875 	.word	0x08000875
 80006b8:	08000875 	.word	0x08000875
 80006bc:	08000875 	.word	0x08000875
 80006c0:	080007cd 	.word	0x080007cd
 80006c4:	08000875 	.word	0x08000875
 80006c8:	08000875 	.word	0x08000875
 80006cc:	08000875 	.word	0x08000875
 80006d0:	08000875 	.word	0x08000875
 80006d4:	08000875 	.word	0x08000875
 80006d8:	08000875 	.word	0x08000875
 80006dc:	08000875 	.word	0x08000875
 80006e0:	08000805 	.word	0x08000805
 80006e4:	08000875 	.word	0x08000875
 80006e8:	08000875 	.word	0x08000875
 80006ec:	08000875 	.word	0x08000875
 80006f0:	08000875 	.word	0x08000875
 80006f4:	08000875 	.word	0x08000875
 80006f8:	08000875 	.word	0x08000875
 80006fc:	08000875 	.word	0x08000875
 8000700:	08000875 	.word	0x08000875
 8000704:	08000875 	.word	0x08000875
 8000708:	08000875 	.word	0x08000875
 800070c:	08000875 	.word	0x08000875
 8000710:	08000875 	.word	0x08000875
 8000714:	08000875 	.word	0x08000875
 8000718:	08000875 	.word	0x08000875
 800071c:	08000875 	.word	0x08000875
 8000720:	0800083d 	.word	0x0800083d
		{
		case 0x001:
			motor1.data[0] = Data_CAN_Rx[0];  motor1.data[1] = Data_CAN_Rx[1]; motor1.data[2] = Data_CAN_Rx[2];
 8000724:	4b55      	ldr	r3, [pc, #340]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	4b58      	ldr	r3, [pc, #352]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800072a:	705a      	strb	r2, [r3, #1]
 800072c:	4b53      	ldr	r3, [pc, #332]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	4b56      	ldr	r3, [pc, #344]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000732:	709a      	strb	r2, [r3, #2]
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000736:	789a      	ldrb	r2, [r3, #2]
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800073a:	70da      	strb	r2, [r3, #3]
			motor1.data[3] = Data_CAN_Rx[3];  motor1.data[4] = Data_CAN_Rx[4]; motor1.data[5] = Data_CAN_Rx[5];
 800073c:	4b4f      	ldr	r3, [pc, #316]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800073e:	78da      	ldrb	r2, [r3, #3]
 8000740:	4b52      	ldr	r3, [pc, #328]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000742:	711a      	strb	r2, [r3, #4]
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000746:	791a      	ldrb	r2, [r3, #4]
 8000748:	4b50      	ldr	r3, [pc, #320]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800074a:	715a      	strb	r2, [r3, #5]
 800074c:	4b4b      	ldr	r3, [pc, #300]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800074e:	795a      	ldrb	r2, [r3, #5]
 8000750:	4b4e      	ldr	r3, [pc, #312]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000752:	719a      	strb	r2, [r3, #6]
			motor1.flag_motor_ready = true;
 8000754:	4b4d      	ldr	r3, [pc, #308]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000756:	2201      	movs	r2, #1
 8000758:	721a      	strb	r2, [r3, #8]
			break;
 800075a:	e08b      	b.n	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x002:
			motor2.data[0] = Data_CAN_Rx[0];  motor2.data[1] = Data_CAN_Rx[1]; motor2.data[2] = Data_CAN_Rx[2];
 800075c:	4b47      	ldr	r3, [pc, #284]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000762:	705a      	strb	r2, [r3, #1]
 8000764:	4b45      	ldr	r3, [pc, #276]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800076a:	709a      	strb	r2, [r3, #2]
 800076c:	4b43      	ldr	r3, [pc, #268]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800076e:	789a      	ldrb	r2, [r3, #2]
 8000770:	4b47      	ldr	r3, [pc, #284]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000772:	70da      	strb	r2, [r3, #3]
			motor2.data[3] = Data_CAN_Rx[3];  motor2.data[4] = Data_CAN_Rx[4]; motor2.data[5] = Data_CAN_Rx[5];
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000776:	78da      	ldrb	r2, [r3, #3]
 8000778:	4b45      	ldr	r3, [pc, #276]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800077a:	711a      	strb	r2, [r3, #4]
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800077e:	791a      	ldrb	r2, [r3, #4]
 8000780:	4b43      	ldr	r3, [pc, #268]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000782:	715a      	strb	r2, [r3, #5]
 8000784:	4b3d      	ldr	r3, [pc, #244]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000786:	795a      	ldrb	r2, [r3, #5]
 8000788:	4b41      	ldr	r3, [pc, #260]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800078a:	719a      	strb	r2, [r3, #6]
			motor2.flag_motor_ready = true;
 800078c:	4b40      	ldr	r3, [pc, #256]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800078e:	2201      	movs	r2, #1
 8000790:	721a      	strb	r2, [r3, #8]
			break;
 8000792:	e06f      	b.n	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x004:
			motor3.data[0] = Data_CAN_Rx[0];  motor3.data[1] = Data_CAN_Rx[1]; motor3.data[2] = Data_CAN_Rx[2];
 8000794:	4b39      	ldr	r3, [pc, #228]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800079a:	705a      	strb	r2, [r3, #1]
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007a2:	709a      	strb	r2, [r3, #2]
 80007a4:	4b35      	ldr	r3, [pc, #212]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007a6:	789a      	ldrb	r2, [r3, #2]
 80007a8:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007aa:	70da      	strb	r2, [r3, #3]
			motor3.data[3] = Data_CAN_Rx[3];  motor3.data[4] = Data_CAN_Rx[4]; motor3.data[5] = Data_CAN_Rx[5];
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ae:	78da      	ldrb	r2, [r3, #3]
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007b2:	711a      	strb	r2, [r3, #4]
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007b6:	791a      	ldrb	r2, [r3, #4]
 80007b8:	4b36      	ldr	r3, [pc, #216]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007ba:	715a      	strb	r2, [r3, #5]
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007be:	795a      	ldrb	r2, [r3, #5]
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007c2:	719a      	strb	r2, [r3, #6]
			motor3.flag_motor_ready = true;
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	721a      	strb	r2, [r3, #8]
			break;
 80007ca:	e053      	b.n	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x008:
			motor4.data[0] = Data_CAN_Rx[0];  motor4.data[1] = Data_CAN_Rx[1]; motor4.data[2] = Data_CAN_Rx[2];
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007d2:	705a      	strb	r2, [r3, #1]
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007d6:	785a      	ldrb	r2, [r3, #1]
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007da:	709a      	strb	r2, [r3, #2]
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007de:	789a      	ldrb	r2, [r3, #2]
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007e2:	70da      	strb	r2, [r3, #3]
			motor4.data[3] = Data_CAN_Rx[3];  motor4.data[4] = Data_CAN_Rx[4]; motor4.data[5] = Data_CAN_Rx[5];
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007e6:	78da      	ldrb	r2, [r3, #3]
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007ea:	711a      	strb	r2, [r3, #4]
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ee:	791a      	ldrb	r2, [r3, #4]
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007f2:	715a      	strb	r2, [r3, #5]
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007f6:	795a      	ldrb	r2, [r3, #5]
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007fa:	719a      	strb	r2, [r3, #6]
			motor4.flag_motor_ready = true;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	721a      	strb	r2, [r3, #8]
			break;
 8000802:	e037      	b.n	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x010:
			motor5.data[0] = Data_CAN_Rx[0];  motor5.data[1] = Data_CAN_Rx[1]; motor5.data[2] = Data_CAN_Rx[2];
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800080a:	705a      	strb	r2, [r3, #1]
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800080e:	785a      	ldrb	r2, [r3, #1]
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000812:	709a      	strb	r2, [r3, #2]
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000816:	789a      	ldrb	r2, [r3, #2]
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800081a:	70da      	strb	r2, [r3, #3]
			motor5.data[3] = Data_CAN_Rx[3];  motor5.data[4] = Data_CAN_Rx[4]; motor5.data[5] = Data_CAN_Rx[5];
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800081e:	78da      	ldrb	r2, [r3, #3]
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000822:	711a      	strb	r2, [r3, #4]
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000826:	791a      	ldrb	r2, [r3, #4]
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800082a:	715a      	strb	r2, [r3, #5]
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800082e:	795a      	ldrb	r2, [r3, #5]
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000832:	719a      	strb	r2, [r3, #6]
			motor5.flag_motor_ready = true;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000836:	2201      	movs	r2, #1
 8000838:	721a      	strb	r2, [r3, #8]
			break;
 800083a:	e01b      	b.n	8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x020:
			motor6.data[0] = Data_CAN_Rx[0];  motor6.data[1] = Data_CAN_Rx[1]; motor6.data[2] = Data_CAN_Rx[2];
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000842:	705a      	strb	r2, [r3, #1]
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000846:	785a      	ldrb	r2, [r3, #1]
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800084a:	709a      	strb	r2, [r3, #2]
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800084e:	789a      	ldrb	r2, [r3, #2]
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000852:	70da      	strb	r2, [r3, #3]
			motor6.data[3] = Data_CAN_Rx[3];  motor6.data[4] = Data_CAN_Rx[4]; motor6.data[5] = Data_CAN_Rx[5];
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000856:	78da      	ldrb	r2, [r3, #3]
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800085a:	711a      	strb	r2, [r3, #4]
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800085e:	791a      	ldrb	r2, [r3, #4]
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000862:	715a      	strb	r2, [r3, #5]
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000866:	795a      	ldrb	r2, [r3, #5]
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800086a:	719a      	strb	r2, [r3, #6]
			motor6.flag_motor_ready = true;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800086e:	2201      	movs	r2, #1
 8000870:	721a      	strb	r2, [r3, #8]
			break;
 8000872:	bf00      	nop
		}
	}
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000d8 	.word	0x200000d8
 8000880:	20000090 	.word	0x20000090
 8000884:	20000128 	.word	0x20000128
 8000888:	40020c00 	.word	0x40020c00
 800088c:	200000e0 	.word	0x200000e0
 8000890:	200000ec 	.word	0x200000ec
 8000894:	200000f8 	.word	0x200000f8
 8000898:	20000104 	.word	0x20000104
 800089c:	20000110 	.word	0x20000110
 80008a0:	2000011c 	.word	0x2000011c

080008a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0a2      	sub	sp, #136	; 0x88
 80008a8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008aa:	f000 fd83 	bl	80013b4 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008ae:	f000 f99d 	bl	8000bec <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b2:	f000 fb3b 	bl	8000f2c <MX_GPIO_Init>
	MX_CAN1_Init();
 80008b6:	f000 fa03 	bl	8000cc0 <MX_CAN1_Init>
	MX_TIM1_Init();
 80008ba:	f000 fa71 	bl	8000da0 <MX_TIM1_Init>
	MX_TIM2_Init();
 80008be:	f000 fabf 	bl	8000e40 <MX_TIM2_Init>
	MX_UART4_Init();
 80008c2:	f000 fb09 	bl	8000ed8 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	//========================UART RECEIVE IT
	HAL_UART_Init(&huart4);
 80008c6:	48ac      	ldr	r0, [pc, #688]	; (8000b78 <main+0x2d4>)
 80008c8:	f003 f93e 	bl	8003b48 <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80008cc:	222b      	movs	r2, #43	; 0x2b
 80008ce:	49ab      	ldr	r1, [pc, #684]	; (8000b7c <main+0x2d8>)
 80008d0:	48a9      	ldr	r0, [pc, #676]	; (8000b78 <main+0x2d4>)
 80008d2:	f003 fa18 	bl	8003d06 <HAL_UART_Receive_IT>

	//========================CAN BUS CONFIG
	/*----------------- CAN START TX AND RX ----------*/
	HAL_CAN_Start(&hcan1);
 80008d6:	48aa      	ldr	r0, [pc, #680]	; (8000b80 <main+0x2dc>)
 80008d8:	f000 ffba 	bl	8001850 <HAL_CAN_Start>
	/*----------------- ENABLE TIMER 1----------*/
	HAL_TIM_Base_Start_IT(&htim1);
 80008dc:	48a9      	ldr	r0, [pc, #676]	; (8000b84 <main+0x2e0>)
 80008de:	f002 fd01 	bl	80032e4 <HAL_TIM_Base_Start_IT>
	/*----------------- ENABLE TIMER 2----------*/
	HAL_TIM_Base_Start(&htim2);
 80008e2:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <main+0x2e4>)
 80008e4:	f002 fc96 	bl	8003214 <HAL_TIM_Base_Start>

	/*INIT FOR STRUC MOTOR*/
	motor1.name = 'a'; motor2.name = 'b'; motor3.name = 'c';
 80008e8:	4ba8      	ldr	r3, [pc, #672]	; (8000b8c <main+0x2e8>)
 80008ea:	2261      	movs	r2, #97	; 0x61
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	4ba8      	ldr	r3, [pc, #672]	; (8000b90 <main+0x2ec>)
 80008f0:	2262      	movs	r2, #98	; 0x62
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	4ba7      	ldr	r3, [pc, #668]	; (8000b94 <main+0x2f0>)
 80008f6:	2263      	movs	r2, #99	; 0x63
 80008f8:	701a      	strb	r2, [r3, #0]
	motor4.name = 'd'; motor5.name = 'e'; motor6.name = 'f';
 80008fa:	4ba7      	ldr	r3, [pc, #668]	; (8000b98 <main+0x2f4>)
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	4ba6      	ldr	r3, [pc, #664]	; (8000b9c <main+0x2f8>)
 8000902:	2265      	movs	r2, #101	; 0x65
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	4ba6      	ldr	r3, [pc, #664]	; (8000ba0 <main+0x2fc>)
 8000908:	2266      	movs	r2, #102	; 0x66
 800090a:	701a      	strb	r2, [r3, #0]

	motor1.flag_motor_ready = false;
 800090c:	4b9f      	ldr	r3, [pc, #636]	; (8000b8c <main+0x2e8>)
 800090e:	2200      	movs	r2, #0
 8000910:	721a      	strb	r2, [r3, #8]
	motor2.flag_motor_ready = false;
 8000912:	4b9f      	ldr	r3, [pc, #636]	; (8000b90 <main+0x2ec>)
 8000914:	2200      	movs	r2, #0
 8000916:	721a      	strb	r2, [r3, #8]
	motor3.flag_motor_ready = false;
 8000918:	4b9e      	ldr	r3, [pc, #632]	; (8000b94 <main+0x2f0>)
 800091a:	2200      	movs	r2, #0
 800091c:	721a      	strb	r2, [r3, #8]
	motor4.flag_motor_ready = false;
 800091e:	4b9e      	ldr	r3, [pc, #632]	; (8000b98 <main+0x2f4>)
 8000920:	2200      	movs	r2, #0
 8000922:	721a      	strb	r2, [r3, #8]
	motor5.flag_motor_ready = false;
 8000924:	4b9d      	ldr	r3, [pc, #628]	; (8000b9c <main+0x2f8>)
 8000926:	2200      	movs	r2, #0
 8000928:	721a      	strb	r2, [r3, #8]
	motor6.flag_motor_ready = false;
 800092a:	4b9d      	ldr	r3, [pc, #628]	; (8000ba0 <main+0x2fc>)
 800092c:	2200      	movs	r2, #0
 800092e:	721a      	strb	r2, [r3, #8]
	while(1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(flag_timer1 == true)
 8000930:	4b9c      	ldr	r3, [pc, #624]	; (8000ba4 <main+0x300>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8104 	beq.w	8000b42 <main+0x29e>
		{
			uint8_t length = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			flag_timer1 = false;
 8000940:	4b98      	ldr	r3, [pc, #608]	; (8000ba4 <main+0x300>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
			if(StateUART == DATA_UART_AVAILABLE)
 8000946:	4b98      	ldr	r3, [pc, #608]	; (8000ba8 <main+0x304>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d020      	beq.n	8000990 <main+0xec>
			{
				length = Data_UART_Receive_Lenght;
 800094e:	4b97      	ldr	r3, [pc, #604]	; (8000bac <main+0x308>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				Data_UART_Receive_Lenght = 0; // Not Reset - > failed
 8000956:	4b95      	ldr	r3, [pc, #596]	; (8000bac <main+0x308>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	673b      	str	r3, [r7, #112]	; 0x70
 8000960:	e00b      	b.n	800097a <main+0xd6>
				{
					Data_UART_Saved[i] = Data_UART_Receive[i];
 8000962:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <main+0x2d8>)
 8000964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000966:	4413      	add	r3, r2
 8000968:	7819      	ldrb	r1, [r3, #0]
 800096a:	4a91      	ldr	r2, [pc, #580]	; (8000bb0 <main+0x30c>)
 800096c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800096e:	4413      	add	r3, r2
 8000970:	460a      	mov	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 8000974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000976:	3301      	adds	r3, #1
 8000978:	673b      	str	r3, [r7, #112]	; 0x70
 800097a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800097e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000980:	429a      	cmp	r2, r3
 8000982:	ddee      	ble.n	8000962 <main+0xbe>
				}
				StateUART = DATA_UART_UNAVAILABLE;
 8000984:	4b88      	ldr	r3, [pc, #544]	; (8000ba8 <main+0x304>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
				Check_OKE = true;
 800098a:	4b8a      	ldr	r3, [pc, #552]	; (8000bb4 <main+0x310>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
				// this function return length
			}
			if(Check_OKE == true && Flag_Reset == false)
 8000990:	4b88      	ldr	r3, [pc, #544]	; (8000bb4 <main+0x310>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80bc 	beq.w	8000b12 <main+0x26e>
 800099a:	4b87      	ldr	r3, [pc, #540]	; (8000bb8 <main+0x314>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80b4 	beq.w	8000b12 <main+0x26e>
			{
				Check_OKE = false;
 80009aa:	4b82      	ldr	r3, [pc, #520]	; (8000bb4 <main+0x310>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
				uint8_t theta1[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009b0:	4a82      	ldr	r2, [pc, #520]	; (8000bbc <main+0x318>)
 80009b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ba:	6018      	str	r0, [r3, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	8019      	strh	r1, [r3, #0]
						theta2[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009c0:	4a7e      	ldr	r2, [pc, #504]	; (8000bbc <main+0x318>)
 80009c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ca:	6018      	str	r0, [r3, #0]
 80009cc:	3304      	adds	r3, #4
 80009ce:	8019      	strh	r1, [r3, #0]
						theta3[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009d0:	4a7a      	ldr	r2, [pc, #488]	; (8000bbc <main+0x318>)
 80009d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009da:	6018      	str	r0, [r3, #0]
 80009dc:	3304      	adds	r3, #4
 80009de:	8019      	strh	r1, [r3, #0]
						theta4[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009e0:	4a76      	ldr	r2, [pc, #472]	; (8000bbc <main+0x318>)
 80009e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ea:	6018      	str	r0, [r3, #0]
 80009ec:	3304      	adds	r3, #4
 80009ee:	8019      	strh	r1, [r3, #0]
						theta5[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009f0:	4a72      	ldr	r2, [pc, #456]	; (8000bbc <main+0x318>)
 80009f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fa:	6018      	str	r0, [r3, #0]
 80009fc:	3304      	adds	r3, #4
 80009fe:	8019      	strh	r1, [r3, #0]
						theta6[6] = {' ', ' ', ' ', ' ', ' ', ' '};
 8000a00:	4a6e      	ldr	r2, [pc, #440]	; (8000bbc <main+0x318>)
 8000a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0a:	6018      	str	r0, [r3, #0]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	8019      	strh	r1, [r3, #0]
				// Function handles (checked)
				Split_String_UART(Data_UART_Saved, length, theta1, theta2, theta3, theta4, theta5, theta6);
 8000a10:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000a14:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a18:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8000a1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a20:	9303      	str	r3, [sp, #12]
 8000a22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4603      	mov	r3, r0
 8000a36:	485e      	ldr	r0, [pc, #376]	; (8000bb0 <main+0x30c>)
 8000a38:	f004 f8fe 	bl	8004c38 <Split_String_UART>

				// Send 6 massage CAN (checked)
				TX_CAN_HEADER.StdId = 0x001; // Node 1
 8000a3c:	4b60      	ldr	r3, [pc, #384]	; (8000bc0 <main+0x31c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta1, &TxMailBox);
 8000a42:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <main+0x320>)
 8000a48:	495d      	ldr	r1, [pc, #372]	; (8000bc0 <main+0x31c>)
 8000a4a:	484d      	ldr	r0, [pc, #308]	; (8000b80 <main+0x2dc>)
 8000a4c:	f000 ff44 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a54:	f7ff fda6 	bl	80005a4 <delay_us>

				TX_CAN_HEADER.StdId = 0x002;// Node 2
 8000a58:	4b59      	ldr	r3, [pc, #356]	; (8000bc0 <main+0x31c>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta2, &TxMailBox);
 8000a5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <main+0x320>)
 8000a64:	4956      	ldr	r1, [pc, #344]	; (8000bc0 <main+0x31c>)
 8000a66:	4846      	ldr	r0, [pc, #280]	; (8000b80 <main+0x2dc>)
 8000a68:	f000 ff36 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a70:	f7ff fd98 	bl	80005a4 <delay_us>

				TX_CAN_HEADER.StdId = 0x004;// Node 3
 8000a74:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <main+0x31c>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta3, &TxMailBox);
 8000a7a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000a7e:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <main+0x320>)
 8000a80:	494f      	ldr	r1, [pc, #316]	; (8000bc0 <main+0x31c>)
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <main+0x2dc>)
 8000a84:	f000 ff28 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a8c:	f7ff fd8a 	bl	80005a4 <delay_us>

				TX_CAN_HEADER.StdId = 0x008;// Node 4
 8000a90:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <main+0x31c>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta4, &TxMailBox);
 8000a96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <main+0x320>)
 8000a9c:	4948      	ldr	r1, [pc, #288]	; (8000bc0 <main+0x31c>)
 8000a9e:	4838      	ldr	r0, [pc, #224]	; (8000b80 <main+0x2dc>)
 8000aa0:	f000 ff1a 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000aa4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aa8:	f7ff fd7c 	bl	80005a4 <delay_us>

				TX_CAN_HEADER.StdId = 0x010;// Node 5
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <main+0x31c>)
 8000aae:	2210      	movs	r2, #16
 8000ab0:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta5, &TxMailBox);
 8000ab2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <main+0x320>)
 8000ab8:	4941      	ldr	r1, [pc, #260]	; (8000bc0 <main+0x31c>)
 8000aba:	4831      	ldr	r0, [pc, #196]	; (8000b80 <main+0x2dc>)
 8000abc:	f000 ff0c 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000ac0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ac4:	f7ff fd6e 	bl	80005a4 <delay_us>

				TX_CAN_HEADER.StdId = 0x020;// Node 6
 8000ac8:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <main+0x31c>)
 8000aca:	2220      	movs	r2, #32
 8000acc:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta6, &TxMailBox);
 8000ace:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <main+0x320>)
 8000ad4:	493a      	ldr	r1, [pc, #232]	; (8000bc0 <main+0x31c>)
 8000ad6:	482a      	ldr	r0, [pc, #168]	; (8000b80 <main+0x2dc>)
 8000ad8:	f000 fefe 	bl	80018d8 <HAL_CAN_AddTxMessage>
				delay_us(500);
 8000adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae0:	f7ff fd60 	bl	80005a4 <delay_us>

				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	4837      	ldr	r0, [pc, #220]	; (8000bc8 <main+0x324>)
 8000aea:	f001 fe90 	bl	800280e <HAL_GPIO_TogglePin>

				//=======================SET RUN SYNCHRONOUS

				TX_CAN_HEADER.StdId = 0x000;
 8000aee:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <main+0x31c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[8] = {'s', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
 8000af4:	4a35      	ldr	r2, [pc, #212]	; (8000bcc <main+0x328>)
 8000af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afe:	e883 0003 	stmia.w	r3, {r0, r1}
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000b02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <main+0x320>)
 8000b08:	492d      	ldr	r1, [pc, #180]	; (8000bc0 <main+0x31c>)
 8000b0a:	481d      	ldr	r0, [pc, #116]	; (8000b80 <main+0x2dc>)
 8000b0c:	f000 fee4 	bl	80018d8 <HAL_CAN_AddTxMessage>
			{
 8000b10:	e017      	b.n	8000b42 <main+0x29e>
			}
			else if (Flag_Reset == true) //(checked)
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <main+0x314>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d013      	beq.n	8000b42 <main+0x29e>
			{
				Flag_Reset = false;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <main+0x314>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
				//----------------------------- Message reset----------------------
				TX_CAN_HEADER.StdId = 0x000;
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <main+0x31c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[8] = {'r', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
 8000b26:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <main+0x32c>)
 8000b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b30:	e883 0003 	stmia.w	r3, {r0, r1}
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000b34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <main+0x320>)
 8000b3a:	4921      	ldr	r1, [pc, #132]	; (8000bc0 <main+0x31c>)
 8000b3c:	4810      	ldr	r0, [pc, #64]	; (8000b80 <main+0x2dc>)
 8000b3e:	f000 fecb 	bl	80018d8 <HAL_CAN_AddTxMessage>
			}

		}
//		if(motor1.flag_motor_ready == true && motor2.flag_motor_ready == true && motor3.flag_motor_ready == true && motor4.flag_motor_ready == true && motor5.flag_motor_ready == true && motor6.flag_motor_ready == true)
		if(motor1.flag_motor_ready == true)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <main+0x2e8>)
 8000b44:	7a1b      	ldrb	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f43f aef2 	beq.w	8000930 <main+0x8c>
		{
			motor1.flag_motor_ready = false;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <main+0x2e8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	721a      	strb	r2, [r3, #8]
//			motor4.flag_motor_ready = false;
//			motor5.flag_motor_ready = false;
//			motor6.flag_motor_ready = false;

			uint8_t Data_encoder[43];
			Handles_UART_6_motor(motor1.data, motor2.data, motor3.data, motor4.data, motor5.data, motor6.data, Data_encoder);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <main+0x330>)
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <main+0x334>)
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <main+0x338>)
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <main+0x33c>)
 8000b62:	4920      	ldr	r1, [pc, #128]	; (8000be4 <main+0x340>)
 8000b64:	4820      	ldr	r0, [pc, #128]	; (8000be8 <main+0x344>)
 8000b66:	f004 f93b 	bl	8004de0 <Handles_UART_6_motor>

			HAL_UART_Transmit(&huart4, Data_encoder, 43, 5);
 8000b6a:	1d39      	adds	r1, r7, #4
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	222b      	movs	r2, #43	; 0x2b
 8000b70:	4801      	ldr	r0, [pc, #4]	; (8000b78 <main+0x2d4>)
 8000b72:	f003 f836 	bl	8003be2 <HAL_UART_Transmit>
		if(flag_timer1 == true)
 8000b76:	e6db      	b.n	8000930 <main+0x8c>
 8000b78:	200001e0 	.word	0x200001e0
 8000b7c:	20000224 	.word	0x20000224
 8000b80:	20000128 	.word	0x20000128
 8000b84:	20000150 	.word	0x20000150
 8000b88:	20000198 	.word	0x20000198
 8000b8c:	200000e0 	.word	0x200000e0
 8000b90:	200000ec 	.word	0x200000ec
 8000b94:	200000f8 	.word	0x200000f8
 8000b98:	20000104 	.word	0x20000104
 8000b9c:	20000110 	.word	0x20000110
 8000ba0:	2000011c 	.word	0x2000011c
 8000ba4:	2000027e 	.word	0x2000027e
 8000ba8:	2000027b 	.word	0x2000027b
 8000bac:	2000024f 	.word	0x2000024f
 8000bb0:	20000250 	.word	0x20000250
 8000bb4:	2000027c 	.word	0x2000027c
 8000bb8:	2000027d 	.word	0x2000027d
 8000bbc:	0800594c 	.word	0x0800594c
 8000bc0:	20000078 	.word	0x20000078
 8000bc4:	200000d4 	.word	0x200000d4
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	08005954 	.word	0x08005954
 8000bd0:	0800595c 	.word	0x0800595c
 8000bd4:	2000011d 	.word	0x2000011d
 8000bd8:	20000111 	.word	0x20000111
 8000bdc:	20000105 	.word	0x20000105
 8000be0:	200000f9 	.word	0x200000f9
 8000be4:	200000ed 	.word	0x200000ed
 8000be8:	200000e1 	.word	0x200000e1

08000bec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fa16 	bl	800502c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <SystemClock_Config+0xcc>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000c60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c64:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fde6 	bl	8002844 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000c7e:	f000 f9c3 	bl	8001008 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c92:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f847 	bl	8002d34 <HAL_RCC_ClockConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000cac:	f000 f9ac 	bl	8001008 <Error_Handler>
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3750      	adds	r7, #80	; 0x50
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000

08000cc0 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_Init 0 */
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <MX_CAN1_Init+0xd4>)
 8000cc8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 7;
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000ce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cea:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d10:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d12:	f000 fbc1 	bl	8001498 <HAL_CAN_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000d1c:	f000 f974 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	/*----------------------- Configuration CAN Filter---------------
	 * */
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000 << 5;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xff00 << 5;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d40:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8000d44:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d5a:	220e      	movs	r2, #14
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) // add
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <MX_CAN1_Init+0xd8>)
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d62:	f000 fc95 	bl	8001690 <HAL_CAN_ConfigFilter>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_CAN1_Init+0xb0>
	{
		Error_Handler();
 8000d6c:	f000 f94c 	bl	8001008 <Error_Handler>
	}
	/* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
	TX_CAN_HEADER.RTR=CAN_RTR_DATA; //Remote transmission request = Data frame
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_CAN1_Init+0xdc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
	TX_CAN_HEADER.IDE=CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_CAN1_Init+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
	TX_CAN_HEADER.DLC=8;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_CAN1_Init+0xdc>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	611a      	str	r2, [r3, #16]
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts
 8000d82:	2102      	movs	r1, #2
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <MX_CAN1_Init+0xd0>)
 8000d86:	f000 ff94 	bl	8001cb2 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000128 	.word	0x20000128
 8000d94:	40006400 	.word	0x40006400
 8000d98:	200000ac 	.word	0x200000ac
 8000d9c:	20000078 	.word	0x20000078

08000da0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dc0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dc4:	2253      	movs	r2, #83	; 0x53
 8000dc6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dd0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000dd4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dea:	f002 f9c3 	bl	8003174 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000df4:	f000 f908 	bl	8001008 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000e06:	f002 fbe5 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8000e10:	f000 f8fa 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000e22:	f002 fe01 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000e2c:	f000 f8ec 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000150 	.word	0x20000150
 8000e3c:	40010000 	.word	0x40010000

08000e40 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e62:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 167;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e66:	22a7      	movs	r2, #167	; 0xa7
 8000e68:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e72:	f04f 32ff 	mov.w	r2, #4294967295
 8000e76:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e86:	f002 f975 	bl	8003174 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000e90:	f000 f8ba 	bl	8001008 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000ea2:	f002 fb97 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000eac:	f000 f8ac 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000ebe:	f002 fdb3 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000ec8:	f000 f89e 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000198 	.word	0x20000198

08000ed8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_UART4_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_UART4_Init+0x4c>)
 8000f10:	f002 fe1a 	bl	8003b48 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000f1a:	f000 f875 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001e0 	.word	0x200001e0
 8000f28:	40004c00 	.word	0x40004c00

08000f2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a18      	ldr	r2, [pc, #96]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <MX_GPIO_Init+0xd8>)
 8000fd6:	f001 fc01 	bl	80027dc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xd8>)
 8000ff4:	f001 fa56 	bl	80024a4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020c00 	.word	0x40020c00

08001008 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_MspInit+0x5c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <HAL_MspInit+0x5c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_MspInit+0x5c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_MspInit+0x5c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_MspInit+0x5c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_MspInit+0x5c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001056:	2006      	movs	r0, #6
 8001058:	f001 f950 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2101      	movs	r1, #1
 8001060:	2005      	movs	r0, #5
 8001062:	f001 f956 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001066:	2005      	movs	r0, #5
 8001068:	f001 f96f 	bl	800234a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <HAL_CAN_MspInit+0x94>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d134      	bne.n	8001104 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_CAN_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010e4:	2309      	movs	r3, #9
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_CAN_MspInit+0x9c>)
 80010f0:	f001 f9d8 	bl	80024a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2101      	movs	r1, #1
 80010f8:	2014      	movs	r0, #20
 80010fa:	f001 f90a 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010fe:	2014      	movs	r0, #20
 8001100:	f001 f923 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40006400 	.word	0x40006400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020400 	.word	0x40020400

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_TIM_Base_MspInit+0x70>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d116      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2101      	movs	r1, #1
 800114a:	2019      	movs	r0, #25
 800114c:	f001 f8e1 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001150:	2019      	movs	r0, #25
 8001152:	f001 f8fa 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001156:	e012      	b.n	800117e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d10d      	bne.n	800117e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_UART_MspInit+0x94>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d134      	bne.n	800121c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x98>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011fc:	2308      	movs	r3, #8
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <HAL_UART_MspInit+0x9c>)
 8001208:	f001 f94c 	bl	80024a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	f001 f87e 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001216:	2034      	movs	r0, #52	; 0x34
 8001218:	f001 f897 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004c00 	.word	0x40004c00
 8001228:	40023800 	.word	0x40023800
 800122c:	40020800 	.word	0x40020800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f8ec 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <CAN1_RX0_IRQHandler+0x10>)
 800129a:	f000 fd30 	bl	8001cfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000128 	.word	0x20000128

080012a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ae:	f002 f889 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000150 	.word	0x20000150

080012bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <UART4_IRQHandler+0x10>)
 80012c2:	f002 fd51 	bl	8003d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001e0 	.word	0x200001e0

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fe9c 	bl	800503c <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20020000 	.word	0x20020000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000280 	.word	0x20000280
 8001338:	200003d0 	.word	0x200003d0

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800137c:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138a:	f7ff ffd7 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f003 fe5b 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fa87 	bl	80008a4 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a4:	080059c4 	.word	0x080059c4
  ldr r2, =_sbss
 80013a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013ac:	200003d0 	.word	0x200003d0

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 ff8d 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fe16 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 ffa5 	bl	8002366 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 ff6d 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	20000284 	.word	0x20000284

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000284 	.word	0x20000284

08001498 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0ed      	b.n	8001686 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fdde 	bl	8001078 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014cc:	f7ff ffd8 	bl	8001480 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d2:	e012      	b.n	80014fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d4:	f7ff ffd4 	bl	8001480 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d90b      	bls.n	80014fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0c5      	b.n	8001686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0e5      	beq.n	80014d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0202 	bic.w	r2, r2, #2
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff ffb2 	bl	8001480 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151e:	e012      	b.n	8001546 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001520:	f7ff ffae 	bl	8001480 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d90b      	bls.n	8001546 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e09f      	b.n	8001686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e5      	bne.n	8001520 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e007      	b.n	800157e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7e5b      	ldrb	r3, [r3, #25]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d108      	bne.n	8001598 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e007      	b.n	80015a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0220 	orr.w	r2, r2, #32
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0220 	bic.w	r2, r2, #32
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7edb      	ldrb	r3, [r3, #27]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0210 	bic.w	r2, r2, #16
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e007      	b.n	80015fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7f1b      	ldrb	r3, [r3, #28]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0208 	orr.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0208 	bic.w	r2, r2, #8
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7f5b      	ldrb	r3, [r3, #29]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0204 	orr.w	r2, r2, #4
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	ea42 0103 	orr.w	r1, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_ConfigFilter+0x26>
 80016ae:	7cfb      	ldrb	r3, [r7, #19]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	f040 80be 	bne.w	8001832 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_CAN_ConfigFilter+0x1bc>)
 80016b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	431a      	orrs	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2201      	movs	r2, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	401a      	ands	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d123      	bne.n	8001760 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800173a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3248      	adds	r2, #72	; 0x48
 8001740:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001754:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	3348      	adds	r3, #72	; 0x48
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d122      	bne.n	80017ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001788:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3248      	adds	r2, #72	; 0x48
 800178e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	3348      	adds	r3, #72	; 0x48
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	401a      	ands	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017c8:	e007      	b.n	80017da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017f4:	e007      	b.n	8001806 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001824:	f023 0201 	bic.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e006      	b.n	8001840 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40006400 	.word	0x40006400

08001850 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d12e      	bne.n	80018c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff fe00 	bl	8001480 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001882:	e012      	b.n	80018aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001884:	f7ff fdfc 	bl	8001480 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b0a      	cmp	r3, #10
 8001890:	d90b      	bls.n	80018aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2205      	movs	r2, #5
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e012      	b.n	80018d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e5      	bne.n	8001884 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e006      	b.n	80018d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d003      	beq.n	8001904 <HAL_CAN_AddTxMessage+0x2c>
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	f040 80b8 	bne.w	8001a74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80a0 	beq.w	8001a64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	0e1b      	lsrs	r3, r3, #24
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d907      	bls.n	8001944 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e09e      	b.n	8001a82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001944:	2201      	movs	r2, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	409a      	lsls	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	6809      	ldr	r1, [r1, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3318      	adds	r3, #24
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e00f      	b.n	8001992 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800197c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001986:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3318      	adds	r3, #24
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	440b      	add	r3, r1
 8001990:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3318      	adds	r3, #24
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	440b      	add	r3, r1
 80019a2:	3304      	adds	r3, #4
 80019a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	7d1b      	ldrb	r3, [r3, #20]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d111      	bne.n	80019d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3318      	adds	r3, #24
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6811      	ldr	r1, [r2, #0]
 80019c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3318      	adds	r3, #24
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	440b      	add	r3, r1
 80019ce:	3304      	adds	r3, #4
 80019d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3307      	adds	r3, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	061a      	lsls	r2, r3, #24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3306      	adds	r3, #6
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3305      	adds	r3, #5
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4313      	orrs	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	3204      	adds	r2, #4
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	4610      	mov	r0, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	6811      	ldr	r1, [r2, #0]
 80019fa:	ea43 0200 	orr.w	r2, r3, r0
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	061a      	lsls	r2, r3, #24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3302      	adds	r3, #2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4313      	orrs	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	6811      	ldr	r1, [r2, #0]
 8001a30:	ea43 0200 	orr.w	r2, r3, r0
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	440b      	add	r3, r1
 8001a3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3318      	adds	r3, #24
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3318      	adds	r3, #24
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	440b      	add	r3, r1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e00e      	b.n	8001a82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e006      	b.n	8001a82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d003      	beq.n	8001ab2 <HAL_CAN_GetRxMessage+0x24>
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 80f3 	bne.w	8001c98 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10e      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0e7      	b.n	8001ca6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d8      	b.n	8001ca6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	331b      	adds	r3, #27
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0204 	and.w	r2, r3, #4
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0d5b      	lsrs	r3, r3, #21
 8001b22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	331b      	adds	r3, #27
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0202 	and.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	331b      	adds	r3, #27
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	331b      	adds	r3, #27
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	331b      	adds	r3, #27
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0c1b      	lsrs	r3, r3, #16
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0a1a      	lsrs	r2, r3, #8
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0c1a      	lsrs	r2, r3, #16
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3302      	adds	r3, #2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0e1a      	lsrs	r2, r3, #24
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3303      	adds	r3, #3
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0a1a      	lsrs	r2, r3, #8
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	3305      	adds	r3, #5
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0c1a      	lsrs	r2, r3, #16
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3306      	adds	r3, #6
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e1a      	lsrs	r2, r3, #24
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3307      	adds	r3, #7
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	e007      	b.n	8001c94 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e006      	b.n	8001ca6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <HAL_CAN_ActivateNotification+0x1e>
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d109      	bne.n	8001ce4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6959      	ldr	r1, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e006      	b.n	8001cf2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b08a      	sub	sp, #40	; 0x28
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d07c      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d023      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f983 	bl	800206c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d66:	e016      	b.n	8001d96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e00c      	b.n	8001d96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	e002      	b.n	8001d96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f989 	bl	80020a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d024      	beq.n	8001dea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f963 	bl	8002080 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dba:	e016      	b.n	8001dea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	e00c      	b.n	8001dea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e002      	b.n	8001dea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f969 	bl	80020bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d024      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f943 	bl	8002094 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e0e:	e016      	b.n	8001e3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e00c      	b.n	8001e3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e002      	b.n	8001e3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f949 	bl	80020d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2210      	movs	r2, #16
 8001e60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f930 	bl	80020e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7fe fbe5 	bl	800066c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f912 	bl	800210c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8f9 	bl	80020f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2210      	movs	r2, #16
 8001f20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8fc 	bl	8002120 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8f5 	bl	8002134 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d07b      	beq.n	800204c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d072      	beq.n	8002044 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03e      	beq.n	8002044 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fcc:	2b60      	cmp	r3, #96	; 0x60
 8001fce:	d02b      	beq.n	8002028 <HAL_CAN_IRQHandler+0x32a>
 8001fd0:	2b60      	cmp	r3, #96	; 0x60
 8001fd2:	d82e      	bhi.n	8002032 <HAL_CAN_IRQHandler+0x334>
 8001fd4:	2b50      	cmp	r3, #80	; 0x50
 8001fd6:	d022      	beq.n	800201e <HAL_CAN_IRQHandler+0x320>
 8001fd8:	2b50      	cmp	r3, #80	; 0x50
 8001fda:	d82a      	bhi.n	8002032 <HAL_CAN_IRQHandler+0x334>
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d019      	beq.n	8002014 <HAL_CAN_IRQHandler+0x316>
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d826      	bhi.n	8002032 <HAL_CAN_IRQHandler+0x334>
 8001fe4:	2b30      	cmp	r3, #48	; 0x30
 8001fe6:	d010      	beq.n	800200a <HAL_CAN_IRQHandler+0x30c>
 8001fe8:	2b30      	cmp	r3, #48	; 0x30
 8001fea:	d822      	bhi.n	8002032 <HAL_CAN_IRQHandler+0x334>
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d002      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x2f8>
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d005      	beq.n	8002000 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ff4:	e01d      	b.n	8002032 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffe:	e019      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002008:	e014      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002012:	e00f      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800201c:	e00a      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002026:	e005      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002030:	e000      	b.n	8002034 <HAL_CAN_IRQHandler+0x336>
            break;
 8002032:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002042:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2204      	movs	r2, #4
 800204a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f872 	bl	8002148 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff3e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff8e 	bl	8002250 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff31 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff f878 	bl	8001480 <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d008      	beq.n	80023b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e052      	b.n	8002456 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0216 	bic.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_DMA_Abort+0x62>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	e013      	b.n	800242a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002402:	f7ff f83d 	bl	8001480 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d90c      	bls.n	800242a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e015      	b.n	8002456 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e4      	bne.n	8002402 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	223f      	movs	r2, #63	; 0x3f
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d004      	beq.n	800247c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e00c      	b.n	8002496 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e16b      	b.n	8002798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 815a 	bne.w	8002792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b4 	beq.w	8002792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <HAL_GPIO_Init+0x310>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x314>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02b      	beq.n	80026ca <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_GPIO_Init+0x318>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a50      	ldr	r2, [pc, #320]	; (80027c0 <HAL_GPIO_Init+0x31c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <HAL_GPIO_Init+0x320>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x21a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4e      	ldr	r2, [pc, #312]	; (80027c8 <HAL_GPIO_Init+0x324>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x216>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4d      	ldr	r2, [pc, #308]	; (80027cc <HAL_GPIO_Init+0x328>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x212>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4c      	ldr	r2, [pc, #304]	; (80027d0 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x20a>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x310>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_GPIO_Init+0x334>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae90 	bls.w	80024c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	041a      	lsls	r2, r3, #16
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43d9      	mvns	r1, r3
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	400b      	ands	r3, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e267      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d075      	beq.n	800294e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d00c      	beq.n	8002888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002886:	d10b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05b      	beq.n	800294c <HAL_RCC_OscConfig+0x108>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d157      	bne.n	800294c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e242      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x74>
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a75      	ldr	r2, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6f      	ldr	r2, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6c      	ldr	r2, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028dc:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fdc0 	bl	8001480 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fdbc 	bl	8001480 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e207      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xc0>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fdac 	bl	8001480 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fda8 	bl	8001480 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1f3      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0xe8>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c7      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4937      	ldr	r1, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fd61 	bl	8001480 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe fd5d 	bl	8001480 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a8      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4925      	ldr	r1, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fd40 	bl	8001480 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fd3c 	bl	8001480 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e187      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fd20 	bl	8001480 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fd1c 	bl	8001480 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e167      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x200>
 8002a62:	e01b      	b.n	8002a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fd09 	bl	8001480 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	e00e      	b.n	8002a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fe fd05 	bl	8001480 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d907      	bls.n	8002a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e150      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470000 	.word	0x42470000
 8002a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ea      	bne.n	8002a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8097 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a73      	ldr	r2, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fcc5 	bl	8001480 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7fe fcc1 	bl	8001480 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e10c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a63      	ldr	r2, [pc, #396]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x30c>
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a5e      	ldr	r2, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fc86 	bl	8001480 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe fc82 	bl	8001480 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0cb      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ee      	beq.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fc70 	bl	8001480 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fc6c 	bl	8001480 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0b5      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a1 	beq.w	8002d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d05c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d141      	bne.n	8002c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fc40 	bl	8001480 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fc3c 	bl	8001480 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e087      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe fc15 	bl	8001480 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fe fc11 	bl	8001480 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e05c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x416>
 8002c78:	e054      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fbfe 	bl	8001480 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fbfa 	bl	8001480 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e045      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
 8002ca6:	e03d      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e038      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d121      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d111      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0cc      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d90c      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d044      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d119      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e067      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fb2c 	bl	8001480 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fb28 	bl	8001480 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e04f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d20c      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fa8c 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08005968 	.word	0x08005968
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b094      	sub	sp, #80	; 0x50
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	2300      	movs	r3, #0
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b79      	ldr	r3, [pc, #484]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f200 80e1 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f32:	e0db      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b73      	ldr	r3, [pc, #460]	; (8003104 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f38:	e0db      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f3e:	e0d8      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f72:	4622      	mov	r2, r4
 8002f74:	462b      	mov	r3, r5
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f84:	0150      	lsls	r0, r2, #5
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	1a51      	subs	r1, r2, r1
 8002f8e:	6139      	str	r1, [r7, #16]
 8002f90:	4629      	mov	r1, r5
 8002f92:	eb63 0301 	sbc.w	r3, r3, r1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	018b      	lsls	r3, r1, #6
 8002fa8:	4651      	mov	r1, sl
 8002faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fae:	4651      	mov	r1, sl
 8002fb0:	018a      	lsls	r2, r1, #6
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb8:	4659      	mov	r1, fp
 8002fba:	eb63 0901 	sbc.w	r9, r3, r1
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd2:	4690      	mov	r8, r2
 8002fd4:	4699      	mov	r9, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	eb18 0303 	adds.w	r3, r8, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	462b      	mov	r3, r5
 8002fe0:	eb49 0303 	adc.w	r3, r9, r3
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	024b      	lsls	r3, r1, #9
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	024a      	lsls	r2, r1, #9
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003006:	2200      	movs	r2, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800300c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003010:	f7fd f92e 	bl	8000270 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4613      	mov	r3, r2
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	e058      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	2200      	movs	r2, #0
 8003026:	4618      	mov	r0, r3
 8003028:	4611      	mov	r1, r2
 800302a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
 8003034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	f04f 0000 	mov.w	r0, #0
 8003040:	f04f 0100 	mov.w	r1, #0
 8003044:	0159      	lsls	r1, r3, #5
 8003046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304a:	0150      	lsls	r0, r2, #5
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4641      	mov	r1, r8
 8003052:	ebb2 0a01 	subs.w	sl, r2, r1
 8003056:	4649      	mov	r1, r9
 8003058:	eb63 0b01 	sbc.w	fp, r3, r1
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800306c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003070:	ebb2 040a 	subs.w	r4, r2, sl
 8003074:	eb63 050b 	sbc.w	r5, r3, fp
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	00eb      	lsls	r3, r5, #3
 8003082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003086:	00e2      	lsls	r2, r4, #3
 8003088:	4614      	mov	r4, r2
 800308a:	461d      	mov	r5, r3
 800308c:	4643      	mov	r3, r8
 800308e:	18e3      	adds	r3, r4, r3
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	464b      	mov	r3, r9
 8003094:	eb45 0303 	adc.w	r3, r5, r3
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a6:	4629      	mov	r1, r5
 80030a8:	028b      	lsls	r3, r1, #10
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b0:	4621      	mov	r1, r4
 80030b2:	028a      	lsls	r2, r1, #10
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	2200      	movs	r2, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	61fa      	str	r2, [r7, #28]
 80030c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c4:	f7fd f8d4 	bl	8000270 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	3301      	adds	r3, #1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3750      	adds	r7, #80	; 0x50
 80030f8:	46bd      	mov	sp, r7
 80030fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_GetHCLKFreq+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003128:	f7ff fff0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0a9b      	lsrs	r3, r3, #10
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	08005978 	.word	0x08005978

0800314c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003150:	f7ff ffdc 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0b5b      	lsrs	r3, r3, #13
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4903      	ldr	r1, [pc, #12]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	08005978 	.word	0x08005978

08003174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e041      	b.n	800320a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd ffbc 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f000 fafe 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d001      	beq.n	800322c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e046      	b.n	80032ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <HAL_TIM_Base_Start+0xb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d022      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d01d      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_TIM_Base_Start+0xb8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_TIM_Base_Start+0xbc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_TIM_Base_Start+0xc0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_TIM_Base_Start+0xc4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_Base_Start+0xc8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIM_Base_Start+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d111      	bne.n	80032a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d010      	beq.n	80032b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	e007      	b.n	80032b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40010400 	.word	0x40010400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40001800 	.word	0x40001800

080032e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04e      	b.n	800339a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d01d      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_TIM_Base_Start_IT+0xc8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d010      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	e007      	b.n	8003398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40001800 	.word	0x40001800

080033c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0202 	mvn.w	r2, #2
 80033f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9b5 	bl	8003776 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9a7 	bl	8003762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9b8 	bl	800378a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f98b 	bl	8003776 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f97d 	bl	8003762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f98e 	bl	800378a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f961 	bl	8003776 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f953 	bl	8003762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f964 	bl	800378a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f937 	bl	8003776 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f929 	bl	8003762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f93a 	bl	800378a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0201 	mvn.w	r2, #1
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd f812 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fae0 	bl	8003b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8ff 	bl	800379e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0220 	mvn.w	r2, #32
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 faaa 	bl	8003b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b4      	b.n	800375a <HAL_TIM_ConfigClockSource+0x186>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800360e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d03e      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0xd4>
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	f200 8087 	bhi.w	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	f000 8086 	beq.w	8003746 <HAL_TIM_ConfigClockSource+0x172>
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	d87f      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b70      	cmp	r3, #112	; 0x70
 8003642:	d01a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0xa6>
 8003644:	2b70      	cmp	r3, #112	; 0x70
 8003646:	d87b      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b60      	cmp	r3, #96	; 0x60
 800364a:	d050      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x11a>
 800364c:	2b60      	cmp	r3, #96	; 0x60
 800364e:	d877      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003650:	2b50      	cmp	r3, #80	; 0x50
 8003652:	d03c      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xfa>
 8003654:	2b50      	cmp	r3, #80	; 0x50
 8003656:	d873      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d058      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x13a>
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d86f      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003660:	2b30      	cmp	r3, #48	; 0x30
 8003662:	d064      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x15a>
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	d86b      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003668:	2b20      	cmp	r3, #32
 800366a:	d060      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x15a>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d867      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05c      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x15a>
 8003674:	2b10      	cmp	r3, #16
 8003676:	d05a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x15a>
 8003678:	e062      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f000 f9ad 	bl	80039e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800369c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	609a      	str	r2, [r3, #8]
      break;
 80036a6:	e04f      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f000 f996 	bl	80039e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ca:	609a      	str	r2, [r3, #8]
      break;
 80036cc:	e03c      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 f90a 	bl	80038f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2150      	movs	r1, #80	; 0x50
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f963 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80036ec:	e02c      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f000 f929 	bl	8003952 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2160      	movs	r1, #96	; 0x60
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f953 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 800370c:	e01c      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	461a      	mov	r2, r3
 800371c:	f000 f8ea 	bl	80038f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f943 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 800372c:	e00c      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f000 f93a 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 800373e:	e003      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e000      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <TIM_Base_SetConfig+0x118>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <TIM_Base_SetConfig+0x11c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <TIM_Base_SetConfig+0x120>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3a      	ldr	r2, [pc, #232]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d027      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <TIM_Base_SetConfig+0x118>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <TIM_Base_SetConfig+0x11c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <TIM_Base_SetConfig+0x120>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <TIM_Base_SetConfig+0x128>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <TIM_Base_SetConfig+0x12c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <TIM_Base_SetConfig+0x130>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0x134>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <TIM_Base_SetConfig+0x138>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <TIM_Base_SetConfig+0x13c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d103      	bne.n	80038b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	615a      	str	r2, [r3, #20]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40010400 	.word	0x40010400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	40001800 	.word	0x40001800
 80038ec:	40001c00 	.word	0x40001c00
 80038f0:	40002000 	.word	0x40002000

080038f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0201 	bic.w	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f023 030a 	bic.w	r3, r3, #10
 8003930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003952:	b480      	push	{r7}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0210 	bic.w	r2, r3, #16
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800397c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800398e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f043 0307 	orr.w	r3, r3, #7
 80039d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	021a      	lsls	r2, r3, #8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e05a      	b.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d022      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d01d      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d018      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00e      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40010400 	.word	0x40010400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40001800 	.word	0x40001800

08003b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03f      	b.n	8003bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fb0e 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fddf 	bl	8004750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	; 0x28
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d17c      	bne.n	8003cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_UART_Transmit+0x2c>
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e075      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Transmit+0x3e>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e06e      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2221      	movs	r2, #33	; 0x21
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fd fc23 	bl	8001480 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x82>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c74:	e02a      	b.n	8003ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb1f 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e036      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e007      	b.n	8003cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1cf      	bne.n	8003c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2140      	movs	r1, #64	; 0x40
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 faef 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e006      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d11d      	bne.n	8003d5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Receive_IT+0x26>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e016      	b.n	8003d5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Receive_IT+0x38>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e00f      	b.n	8003d5e <HAL_UART_Receive_IT+0x58>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fb24 	bl	80043a0 <UART_Start_Receive_IT>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b0ba      	sub	sp, #232	; 0xe8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_UART_IRQHandler+0x66>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fc07 	bl	80045da <UART_Receive_IT>
      return;
 8003dcc:	e256      	b.n	800427c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80de 	beq.w	8003f94 <HAL_UART_IRQHandler+0x22c>
 8003dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80d1 	beq.w	8003f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_UART_IRQHandler+0xae>
 8003dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xd2>
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_UART_IRQHandler+0xf6>
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0204 	orr.w	r2, r3, #4
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <HAL_UART_IRQHandler+0x126>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0208 	orr.w	r2, r3, #8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 81ed 	beq.w	8004272 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x14e>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fb92 	bl	80045da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x17a>
 8003eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04f      	beq.n	8003f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa9a 	bl	800441c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d141      	bne.n	8003f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1d9      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d013      	beq.n	8003f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_UART_IRQHandler+0x3dc>)
 8003f50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fa81 	bl	800245e <HAL_DMA_Abort_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e00e      	b.n	8003f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f990 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e00a      	b.n	8003f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f98c 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	e006      	b.n	8003f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f988 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f8e:	e170      	b.n	8004272 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	bf00      	nop
    return;
 8003f92:	e16e      	b.n	8004272 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 814a 	bne.w	8004232 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8143 	beq.w	8004232 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 813c 	beq.w	8004232 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	f040 80b4 	bne.w	8004148 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8140 	beq.w	8004276 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f080 8139 	bcs.w	8004276 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800400a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	f000 8088 	beq.w	800412a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800405e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1d9      	bne.n	800401a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800408a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800408e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800409c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e1      	bne.n	8004066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800410c:	65ba      	str	r2, [r7, #88]	; 0x58
 800410e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e3      	bne.n	80040e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f92a 	bl	800237e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004132:	b29b      	uxth	r3, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	b29b      	uxth	r3, r3
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8b6 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004140:	e099      	b.n	8004276 <HAL_UART_IRQHandler+0x50e>
 8004142:	bf00      	nop
 8004144:	080044e3 	.word	0x080044e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004150:	b29b      	uxth	r3, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 808b 	beq.w	800427a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8086 	beq.w	800427a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004192:	647a      	str	r2, [r7, #68]	; 0x44
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e3      	bne.n	800416e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	623b      	str	r3, [r7, #32]
   return(result);
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ca:	633a      	str	r2, [r7, #48]	; 0x30
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e3      	bne.n	80041a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004210:	61fa      	str	r2, [r7, #28]
 8004212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	69b9      	ldr	r1, [r7, #24]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	617b      	str	r3, [r7, #20]
   return(result);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e3      	bne.n	80041ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f83e 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004230:	e023      	b.n	800427a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_UART_IRQHandler+0x4ea>
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f95d 	bl	800450a <UART_Transmit_IT>
    return;
 8004250:	e014      	b.n	800427c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <HAL_UART_IRQHandler+0x514>
 800425e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f99d 	bl	80045aa <UART_EndTransmit_IT>
    return;
 8004270:	e004      	b.n	800427c <HAL_UART_IRQHandler+0x514>
    return;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_UART_IRQHandler+0x514>
      return;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_UART_IRQHandler+0x514>
      return;
 800427a:	bf00      	nop
  }
}
 800427c:	37e8      	adds	r7, #232	; 0xe8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop

08004284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	; 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	e050      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d04c      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e4:	f7fd f8cc 	bl	8001480 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d241      	bcs.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004314:	637a      	str	r2, [r7, #52]	; 0x34
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004348:	623a      	str	r2, [r7, #32]
 800434a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	61bb      	str	r3, [r7, #24]
   return(result);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e00f      	b.n	8004398 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	429a      	cmp	r2, r3
 8004394:	d09f      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3740      	adds	r7, #64	; 0x40
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2222      	movs	r2, #34	; 0x22
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b095      	sub	sp, #84	; 0x54
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004444:	643a      	str	r2, [r7, #64]	; 0x40
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800444a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	61fb      	str	r3, [r7, #28]
   return(result);
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	2b01      	cmp	r3, #1
 8004492:	d119      	bne.n	80044c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	61ba      	str	r2, [r7, #24]
 80044b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	613b      	str	r3, [r7, #16]
   return(result);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044d6:	bf00      	nop
 80044d8:	3754      	adds	r7, #84	; 0x54
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fecb 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b21      	cmp	r3, #33	; 0x21
 800451c:	d13e      	bne.n	800459c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d114      	bne.n	8004552 <UART_Transmit_IT+0x48>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d110      	bne.n	8004552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	621a      	str	r2, [r3, #32]
 8004550:	e008      	b.n	8004564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6211      	str	r1, [r2, #32]
 800455c:	781a      	ldrb	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4619      	mov	r1, r3
 8004572:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10f      	bne.n	8004598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fe5a 	bl	8004284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08c      	sub	sp, #48	; 0x30
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b22      	cmp	r3, #34	; 0x22
 80045ec:	f040 80ab 	bne.w	8004746 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d117      	bne.n	800462a <UART_Receive_IT+0x50>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004618:	b29a      	uxth	r2, r3
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e026      	b.n	8004678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463c:	d007      	beq.n	800464e <UART_Receive_IT+0x74>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <UART_Receive_IT+0x82>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e008      	b.n	800466e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	b2da      	uxtb	r2, r3
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004688:	2b00      	cmp	r3, #0
 800468a:	d15a      	bne.n	8004742 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0220 	bic.w	r2, r2, #32
 800469a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d135      	bne.n	8004738 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	613b      	str	r3, [r7, #16]
   return(result);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	623a      	str	r2, [r7, #32]
 80046f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d10a      	bne.n	800472a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fdbb 	bl	80042ac <HAL_UARTEx_RxEventCallback>
 8004736:	e002      	b.n	800473e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fb ff4d 	bl	80005d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e002      	b.n	8004748 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3730      	adds	r7, #48	; 0x30
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004754:	b0c0      	sub	sp, #256	; 0x100
 8004756:	af00      	add	r7, sp, #0
 8004758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	68d9      	ldr	r1, [r3, #12]
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	ea40 0301 	orr.w	r3, r0, r1
 8004778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a8:	f021 010c 	bic.w	r1, r1, #12
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047b6:	430b      	orrs	r3, r1
 80047b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	6999      	ldr	r1, [r3, #24]
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	ea40 0301 	orr.w	r3, r0, r1
 80047d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <UART_SetConfig+0x2cc>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d005      	beq.n	80047f0 <UART_SetConfig+0xa0>
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <UART_SetConfig+0x2d0>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d104      	bne.n	80047fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe fcac 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 80047f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f8:	e003      	b.n	8004802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7fe fc93 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 80047fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	f040 810c 	bne.w	8004a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800481e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	1891      	adds	r1, r2, r2
 8004828:	65b9      	str	r1, [r7, #88]	; 0x58
 800482a:	415b      	adcs	r3, r3
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004832:	4621      	mov	r1, r4
 8004834:	eb12 0801 	adds.w	r8, r2, r1
 8004838:	4629      	mov	r1, r5
 800483a:	eb43 0901 	adc.w	r9, r3, r1
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004852:	4690      	mov	r8, r2
 8004854:	4699      	mov	r9, r3
 8004856:	4623      	mov	r3, r4
 8004858:	eb18 0303 	adds.w	r3, r8, r3
 800485c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004860:	462b      	mov	r3, r5
 8004862:	eb49 0303 	adc.w	r3, r9, r3
 8004866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800487e:	460b      	mov	r3, r1
 8004880:	18db      	adds	r3, r3, r3
 8004882:	653b      	str	r3, [r7, #80]	; 0x50
 8004884:	4613      	mov	r3, r2
 8004886:	eb42 0303 	adc.w	r3, r2, r3
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
 800488c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004894:	f7fb fcec 	bl	8000270 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <UART_SetConfig+0x2d4>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c0:	415b      	adcs	r3, r3
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c8:	4641      	mov	r1, r8
 80048ca:	eb12 0a01 	adds.w	sl, r2, r1
 80048ce:	4649      	mov	r1, r9
 80048d0:	eb43 0b01 	adc.w	fp, r3, r1
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e8:	4692      	mov	sl, r2
 80048ea:	469b      	mov	fp, r3
 80048ec:	4643      	mov	r3, r8
 80048ee:	eb1a 0303 	adds.w	r3, sl, r3
 80048f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f6:	464b      	mov	r3, r9
 80048f8:	eb4b 0303 	adc.w	r3, fp, r3
 80048fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800490c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
 8004922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492a:	f7fb fca1 	bl	8000270 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4611      	mov	r1, r2
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004936:	fba3 2301 	umull	r2, r3, r3, r1
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2264      	movs	r2, #100	; 0x64
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	1acb      	subs	r3, r1, r3
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <UART_SetConfig+0x2d4>)
 800494c:	fba3 2302 	umull	r2, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004958:	441c      	add	r4, r3
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	63b9      	str	r1, [r7, #56]	; 0x38
 8004974:	415b      	adcs	r3, r3
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800497c:	4641      	mov	r1, r8
 800497e:	1851      	adds	r1, r2, r1
 8004980:	6339      	str	r1, [r7, #48]	; 0x30
 8004982:	4649      	mov	r1, r9
 8004984:	414b      	adcs	r3, r1
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004994:	4659      	mov	r1, fp
 8004996:	00cb      	lsls	r3, r1, #3
 8004998:	4651      	mov	r1, sl
 800499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499e:	4651      	mov	r1, sl
 80049a0:	00ca      	lsls	r2, r1, #3
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	4642      	mov	r2, r8
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b0:	464b      	mov	r3, r9
 80049b2:	460a      	mov	r2, r1
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d0:	460b      	mov	r3, r1
 80049d2:	18db      	adds	r3, r3, r3
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d6:	4613      	mov	r3, r2
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049e6:	f7fb fc43 	bl	8000270 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <UART_SetConfig+0x2d4>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	; 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	3332      	adds	r3, #50	; 0x32
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4422      	add	r2, r4
 8004a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a18:	e106      	b.n	8004c28 <UART_SetConfig+0x4d8>
 8004a1a:	bf00      	nop
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	1891      	adds	r1, r2, r2
 8004a40:	6239      	str	r1, [r7, #32]
 8004a42:	415b      	adcs	r3, r3
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	1854      	adds	r4, r2, r1
 8004a4e:	4649      	mov	r1, r9
 8004a50:	eb43 0501 	adc.w	r5, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	00eb      	lsls	r3, r5, #3
 8004a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a62:	00e2      	lsls	r2, r4, #3
 8004a64:	4614      	mov	r4, r2
 8004a66:	461d      	mov	r5, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	18e3      	adds	r3, r4, r3
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a70:	464b      	mov	r3, r9
 8004a72:	eb45 0303 	adc.w	r3, r5, r3
 8004a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a96:	4629      	mov	r1, r5
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa8:	f7fb fbe2 	bl	8000270 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	011c      	lsls	r4, r3, #4
 8004aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	61b9      	str	r1, [r7, #24]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b10:	464b      	mov	r3, r9
 8004b12:	460a      	mov	r2, r1
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b34:	4649      	mov	r1, r9
 8004b36:	008b      	lsls	r3, r1, #2
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3e:	4641      	mov	r1, r8
 8004b40:	008a      	lsls	r2, r1, #2
 8004b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b46:	f7fb fb93 	bl	8000270 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b52:	fba3 2301 	umull	r2, r3, r3, r1
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2264      	movs	r2, #100	; 0x64
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	1acb      	subs	r3, r1, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	441c      	add	r4, r3
 8004b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b76:	2200      	movs	r2, #0
 8004b78:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b90:	4641      	mov	r1, r8
 8004b92:	1851      	adds	r1, r2, r1
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	4649      	mov	r1, r9
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba8:	4659      	mov	r1, fp
 8004baa:	00cb      	lsls	r3, r1, #3
 8004bac:	4651      	mov	r1, sl
 8004bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	00ca      	lsls	r2, r1, #3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	eb42 0303 	adc.w	r3, r2, r3
 8004bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd6:	667a      	str	r2, [r7, #100]	; 0x64
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be4:	4649      	mov	r1, r9
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bee:	4641      	mov	r1, r8
 8004bf0:	008a      	lsls	r2, r1, #2
 8004bf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf6:	f7fb fb3b 	bl	8000270 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4422      	add	r2, r4
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c34:	51eb851f 	.word	0x51eb851f

08004c38 <Split_String_UART>:
#define END_6_MOTOR 40

#define NUM_BYTES_DATA 5

void Split_String_UART(uint8_t data_in[], uint8_t len, uint8_t t1[], uint8_t t2[], uint8_t t3[], uint8_t t4[], uint8_t t5[], uint8_t t6[])
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b093      	sub	sp, #76	; 0x4c
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	460b      	mov	r3, r1
 8004c46:	72fb      	strb	r3, [r7, #11]
	int position_a = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
	int position_b = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	643b      	str	r3, [r7, #64]	; 0x40
	int position_c = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
	int position_d = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
	int position_e = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
	int position_f = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i = 0; i < len; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c64:	e02b      	b.n	8004cbe <Split_String_UART+0x86>
	{
		switch(data_in[i]){
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	3b61      	subs	r3, #97	; 0x61
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d821      	bhi.n	8004cb8 <Split_String_UART+0x80>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <Split_String_UART+0x44>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004c9b 	.word	0x08004c9b
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	08004ca7 	.word	0x08004ca7
 8004c8c:	08004cad 	.word	0x08004cad
 8004c90:	08004cb3 	.word	0x08004cb3
		case 'a': position_a = i;
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8004c98:	e00e      	b.n	8004cb8 <Split_String_UART+0x80>
		case 'b': position_b = i;
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 8004c9e:	e00b      	b.n	8004cb8 <Split_String_UART+0x80>
		case 'c': position_c = i;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8004ca4:	e008      	b.n	8004cb8 <Split_String_UART+0x80>
		case 'd': position_d = i;
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 8004caa:	e005      	b.n	8004cb8 <Split_String_UART+0x80>
		case 'e': position_e = i;
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
		break;
 8004cb0:	e002      	b.n	8004cb8 <Split_String_UART+0x80>
		case 'f': position_f = i;
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8004cb6:	bf00      	nop
	for(int i = 0; i < len; i++)
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	3301      	adds	r3, #1
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	dbcf      	blt.n	8004c66 <Split_String_UART+0x2e>
		}
	}
	for(int i = 0; i < position_a; i++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	e00a      	b.n	8004ce2 <Split_String_UART+0xaa>
		t1[i] = data_in[i];
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	440b      	add	r3, r1
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < position_a; i++)
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	3301      	adds	r3, #1
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	dbf0      	blt.n	8004ccc <Split_String_UART+0x94>

	for(int i = position_a + 1; i < position_b; i++)
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e00e      	b.n	8004d10 <Split_String_UART+0xd8>
		t2[i - (position_a + 1)] = data_in[i];
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cfe:	1acb      	subs	r3, r1, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	440b      	add	r3, r1
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
	for(int i = position_a + 1; i < position_b; i++)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d14:	429a      	cmp	r2, r3
 8004d16:	dbec      	blt.n	8004cf2 <Split_String_UART+0xba>

	for(int i = position_b + 1; i < position_c; i++)
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	e00e      	b.n	8004d3e <Split_String_UART+0x106>
		t3[i - (position_b + 1)] = data_in[i];
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	441a      	add	r2, r3
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	3301      	adds	r3, #1
 8004d2a:	6a39      	ldr	r1, [r7, #32]
 8004d2c:	1acb      	subs	r3, r1, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d32:	440b      	add	r3, r1
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
	for(int i = position_b + 1; i < position_c; i++)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	dbec      	blt.n	8004d20 <Split_String_UART+0xe8>

	for(int i = position_c + 1; i < position_d; i++)
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e00e      	b.n	8004d6c <Split_String_UART+0x134>
		t4[i - (position_c + 1)] = data_in[i];
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	441a      	add	r2, r3
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d56:	3301      	adds	r3, #1
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	440b      	add	r3, r1
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
	for(int i = position_c + 1; i < position_d; i++)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	429a      	cmp	r2, r3
 8004d72:	dbec      	blt.n	8004d4e <Split_String_UART+0x116>

	for(int i = position_d + 1; i < position_e; i++)
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	3301      	adds	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e00e      	b.n	8004d9a <Split_String_UART+0x162>
		t5[i - (position_d + 1)] = data_in[i];
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	441a      	add	r2, r3
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	3301      	adds	r3, #1
 8004d86:	69b9      	ldr	r1, [r7, #24]
 8004d88:	1acb      	subs	r3, r1, r3
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d8e:	440b      	add	r3, r1
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
	for(int i = position_d + 1; i < position_e; i++)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	dbec      	blt.n	8004d7c <Split_String_UART+0x144>

	for(int i = position_e + 1; i < position_f; i++)
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	3301      	adds	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e00e      	b.n	8004dc8 <Split_String_UART+0x190>
		t6[i - (position_e + 1)] = data_in[i];
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	441a      	add	r2, r3
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	3301      	adds	r3, #1
 8004db4:	6979      	ldr	r1, [r7, #20]
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	4619      	mov	r1, r3
 8004dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbc:	440b      	add	r3, r1
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
	for(int i = position_e + 1; i < position_f; i++)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	dbec      	blt.n	8004daa <Split_String_UART+0x172>
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	374c      	adds	r7, #76	; 0x4c
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <Handles_UART_6_motor>:
void Handles_UART_6_motor(uint8_t data_encoder_1_motor[],uint8_t data_encoder_2_motor[],uint8_t data_encoder_3_motor[],uint8_t data_encoder_4_motor[],uint8_t data_encoder_5_motor[],uint8_t data_encoder_6_motor[], uint8_t Data_Encoder[])
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b09c      	sub	sp, #112	; 0x70
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004dee:	2301      	movs	r3, #1
 8004df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df2:	e017      	b.n	8004e24 <Handles_UART_6_motor+0x44>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_1_motor[END_1_MOTOR - i]);
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	f1c3 0305 	rsb	r3, r3, #5
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e08:	4977      	ldr	r1, [pc, #476]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f8ee 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e16:	4413      	add	r3, r2
 8004e18:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8004e1c:	701a      	strb	r2, [r3, #0]
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	3301      	adds	r3, #1
 8004e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	dde4      	ble.n	8004df4 <Handles_UART_6_motor+0x14>
	}
	Data_Encoder[START_1_MOTOR-1] = data_encoder_1_motor[NUM_BYTES_DATA];
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	795a      	ldrb	r2, [r3, #5]
 8004e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e32:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_1_MOTOR+1] = 'a';
 8004e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e38:	3306      	adds	r3, #6
 8004e3a:	2261      	movs	r2, #97	; 0x61
 8004e3c:	701a      	strb	r2, [r3, #0]

	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004e3e:	2308      	movs	r3, #8
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e42:	e017      	b.n	8004e74 <Handles_UART_6_motor+0x94>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_2_motor[END_2_MOTOR - i]);
 8004e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e46:	f1c3 030c 	rsb	r3, r3, #12
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e58:	4963      	ldr	r1, [pc, #396]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f8c6 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e66:	4413      	add	r3, r2
 8004e68:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8004e6c:	701a      	strb	r2, [r3, #0]
	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e70:	3301      	adds	r3, #1
 8004e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	dde4      	ble.n	8004e44 <Handles_UART_6_motor+0x64>
	}
	Data_Encoder[START_2_MOTOR-1] = data_encoder_2_motor[NUM_BYTES_DATA];
 8004e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e7e:	3307      	adds	r3, #7
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	7952      	ldrb	r2, [r2, #5]
 8004e84:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_2_MOTOR+1] = 'b';
 8004e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e8a:	330d      	adds	r3, #13
 8004e8c:	2262      	movs	r2, #98	; 0x62
 8004e8e:	701a      	strb	r2, [r3, #0]

	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004e90:	230f      	movs	r3, #15
 8004e92:	667b      	str	r3, [r7, #100]	; 0x64
 8004e94:	e017      	b.n	8004ec6 <Handles_UART_6_motor+0xe6>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_3_motor[END_3_MOTOR - i]);
 8004e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e98:	f1c3 0313 	rsb	r3, r3, #19
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004eaa:	494f      	ldr	r1, [pc, #316]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f89d 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eb8:	4413      	add	r3, r2
 8004eba:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004ebe:	701a      	strb	r2, [r3, #0]
	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec8:	2b13      	cmp	r3, #19
 8004eca:	dde4      	ble.n	8004e96 <Handles_UART_6_motor+0xb6>
	}
	Data_Encoder[START_3_MOTOR-1] = data_encoder_3_motor[NUM_BYTES_DATA];
 8004ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ed0:	330e      	adds	r3, #14
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	7952      	ldrb	r2, [r2, #5]
 8004ed6:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_3_MOTOR+1] = 'c';
 8004ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004edc:	3314      	adds	r3, #20
 8004ede:	2263      	movs	r2, #99	; 0x63
 8004ee0:	701a      	strb	r2, [r3, #0]

	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004ee2:	2316      	movs	r3, #22
 8004ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee6:	e017      	b.n	8004f18 <Handles_UART_6_motor+0x138>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_4_motor[END_4_MOTOR - i]);
 8004ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eea:	f1c3 031a 	rsb	r3, r3, #26
 8004eee:	461a      	mov	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efc:	493a      	ldr	r1, [pc, #232]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f874 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004f10:	701a      	strb	r2, [r3, #0]
	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f14:	3301      	adds	r3, #1
 8004f16:	663b      	str	r3, [r7, #96]	; 0x60
 8004f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1a:	2b1a      	cmp	r3, #26
 8004f1c:	dde4      	ble.n	8004ee8 <Handles_UART_6_motor+0x108>
	}
	Data_Encoder[START_4_MOTOR] = data_encoder_4_motor[NUM_BYTES_DATA];
 8004f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f22:	3316      	adds	r3, #22
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	7952      	ldrb	r2, [r2, #5]
 8004f28:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_4_MOTOR+1] = 'd';
 8004f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f2e:	331b      	adds	r3, #27
 8004f30:	2264      	movs	r2, #100	; 0x64
 8004f32:	701a      	strb	r2, [r3, #0]

	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004f34:	231d      	movs	r3, #29
 8004f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f38:	e016      	b.n	8004f68 <Handles_UART_6_motor+0x188>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_5_motor[NUM_BYTES_DATA - i]);
 8004f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f3c:	f1c3 0305 	rsb	r3, r3, #5
 8004f40:	461a      	mov	r2, r3
 8004f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f44:	4413      	add	r3, r2
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4926      	ldr	r1, [pc, #152]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f84b 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f5c:	4413      	add	r3, r2
 8004f5e:	7f3a      	ldrb	r2, [r7, #28]
 8004f60:	701a      	strb	r2, [r3, #0]
	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	3301      	adds	r3, #1
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6a:	2b21      	cmp	r3, #33	; 0x21
 8004f6c:	dde5      	ble.n	8004f3a <Handles_UART_6_motor+0x15a>
	}
	Data_Encoder[START_5_MOTOR-1] = data_encoder_5_motor[NUM_BYTES_DATA];
 8004f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f72:	331c      	adds	r3, #28
 8004f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f76:	7952      	ldrb	r2, [r2, #5]
 8004f78:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_5_MOTOR+1] = 'e';
 8004f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f7e:	3322      	adds	r3, #34	; 0x22
 8004f80:	2265      	movs	r2, #101	; 0x65
 8004f82:	701a      	strb	r2, [r3, #0]

	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8004f84:	2326      	movs	r3, #38	; 0x26
 8004f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f88:	e016      	b.n	8004fb8 <Handles_UART_6_motor+0x1d8>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_6_motor[END_6_MOTOR - i]);
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8004f90:	461a      	mov	r2, r3
 8004f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f107 0310 	add.w	r3, r7, #16
 8004f9e:	4912      	ldr	r1, [pc, #72]	; (8004fe8 <Handles_UART_6_motor+0x208>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f823 	bl	8004fec <siprintf>
		Data_Encoder[i] = tem[0];
 8004fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fac:	4413      	add	r3, r2
 8004fae:	7c3a      	ldrb	r2, [r7, #16]
 8004fb0:	701a      	strb	r2, [r3, #0]
	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8004fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fba:	2b28      	cmp	r3, #40	; 0x28
 8004fbc:	dde5      	ble.n	8004f8a <Handles_UART_6_motor+0x1aa>
	}
	Data_Encoder[START_6_MOTOR-1] = data_encoder_6_motor[NUM_BYTES_DATA];
 8004fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fc2:	3325      	adds	r3, #37	; 0x25
 8004fc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc6:	7952      	ldrb	r2, [r2, #5]
 8004fc8:	701a      	strb	r2, [r3, #0]
	Data_Encoder[END_6_MOTOR+1] = 'f';
 8004fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fce:	3329      	adds	r3, #41	; 0x29
 8004fd0:	2266      	movs	r2, #102	; 0x66
 8004fd2:	701a      	strb	r2, [r3, #0]

	Data_Encoder[END_6_MOTOR+2] = 's';
 8004fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fd8:	332a      	adds	r3, #42	; 0x2a
 8004fda:	2273      	movs	r2, #115	; 0x73
 8004fdc:	701a      	strb	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3770      	adds	r7, #112	; 0x70
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08005964 	.word	0x08005964

08004fec <siprintf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b500      	push	{lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	9006      	str	r0, [sp, #24]
 8004ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ffc:	4809      	ldr	r0, [pc, #36]	; (8005024 <siprintf+0x38>)
 8004ffe:	9107      	str	r1, [sp, #28]
 8005000:	9104      	str	r1, [sp, #16]
 8005002:	4909      	ldr	r1, [pc, #36]	; (8005028 <siprintf+0x3c>)
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	a902      	add	r1, sp, #8
 8005010:	f000 f992 	bl	8005338 <_svfiprintf_r>
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	b01c      	add	sp, #112	; 0x70
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
 8005024:	20000058 	.word	0x20000058
 8005028:	ffff0208 	.word	0xffff0208

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000058 	.word	0x20000058

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 fc6a 	bl	8005934 <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	080059bc 	.word	0x080059bc
 8005084:	080059bc 	.word	0x080059bc
 8005088:	080059bc 	.word	0x080059bc
 800508c:	080059c0 	.word	0x080059c0

08005090 <__retarget_lock_acquire_recursive>:
 8005090:	4770      	bx	lr

08005092 <__retarget_lock_release_recursive>:
 8005092:	4770      	bx	lr

08005094 <_free_r>:
 8005094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005096:	2900      	cmp	r1, #0
 8005098:	d044      	beq.n	8005124 <_free_r+0x90>
 800509a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509e:	9001      	str	r0, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f1a1 0404 	sub.w	r4, r1, #4
 80050a6:	bfb8      	it	lt
 80050a8:	18e4      	addlt	r4, r4, r3
 80050aa:	f000 f8df 	bl	800526c <__malloc_lock>
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <_free_r+0x94>)
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	b933      	cbnz	r3, 80050c4 <_free_r+0x30>
 80050b6:	6063      	str	r3, [r4, #4]
 80050b8:	6014      	str	r4, [r2, #0]
 80050ba:	b003      	add	sp, #12
 80050bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c0:	f000 b8da 	b.w	8005278 <__malloc_unlock>
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d908      	bls.n	80050da <_free_r+0x46>
 80050c8:	6825      	ldr	r5, [r4, #0]
 80050ca:	1961      	adds	r1, r4, r5
 80050cc:	428b      	cmp	r3, r1
 80050ce:	bf01      	itttt	eq
 80050d0:	6819      	ldreq	r1, [r3, #0]
 80050d2:	685b      	ldreq	r3, [r3, #4]
 80050d4:	1949      	addeq	r1, r1, r5
 80050d6:	6021      	streq	r1, [r4, #0]
 80050d8:	e7ed      	b.n	80050b6 <_free_r+0x22>
 80050da:	461a      	mov	r2, r3
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	b10b      	cbz	r3, 80050e4 <_free_r+0x50>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d9fa      	bls.n	80050da <_free_r+0x46>
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	1855      	adds	r5, r2, r1
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	d10b      	bne.n	8005104 <_free_r+0x70>
 80050ec:	6824      	ldr	r4, [r4, #0]
 80050ee:	4421      	add	r1, r4
 80050f0:	1854      	adds	r4, r2, r1
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	d1e0      	bne.n	80050ba <_free_r+0x26>
 80050f8:	681c      	ldr	r4, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	6053      	str	r3, [r2, #4]
 80050fe:	440c      	add	r4, r1
 8005100:	6014      	str	r4, [r2, #0]
 8005102:	e7da      	b.n	80050ba <_free_r+0x26>
 8005104:	d902      	bls.n	800510c <_free_r+0x78>
 8005106:	230c      	movs	r3, #12
 8005108:	6003      	str	r3, [r0, #0]
 800510a:	e7d6      	b.n	80050ba <_free_r+0x26>
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	1961      	adds	r1, r4, r5
 8005110:	428b      	cmp	r3, r1
 8005112:	bf04      	itt	eq
 8005114:	6819      	ldreq	r1, [r3, #0]
 8005116:	685b      	ldreq	r3, [r3, #4]
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	bf04      	itt	eq
 800511c:	1949      	addeq	r1, r1, r5
 800511e:	6021      	streq	r1, [r4, #0]
 8005120:	6054      	str	r4, [r2, #4]
 8005122:	e7ca      	b.n	80050ba <_free_r+0x26>
 8005124:	b003      	add	sp, #12
 8005126:	bd30      	pop	{r4, r5, pc}
 8005128:	200003c8 	.word	0x200003c8

0800512c <sbrk_aligned>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4e0e      	ldr	r6, [pc, #56]	; (8005168 <sbrk_aligned+0x3c>)
 8005130:	460c      	mov	r4, r1
 8005132:	6831      	ldr	r1, [r6, #0]
 8005134:	4605      	mov	r5, r0
 8005136:	b911      	cbnz	r1, 800513e <sbrk_aligned+0x12>
 8005138:	f000 fba6 	bl	8005888 <_sbrk_r>
 800513c:	6030      	str	r0, [r6, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	4628      	mov	r0, r5
 8005142:	f000 fba1 	bl	8005888 <_sbrk_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d00a      	beq.n	8005160 <sbrk_aligned+0x34>
 800514a:	1cc4      	adds	r4, r0, #3
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	42a0      	cmp	r0, r4
 8005152:	d007      	beq.n	8005164 <sbrk_aligned+0x38>
 8005154:	1a21      	subs	r1, r4, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fb96 	bl	8005888 <_sbrk_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d101      	bne.n	8005164 <sbrk_aligned+0x38>
 8005160:	f04f 34ff 	mov.w	r4, #4294967295
 8005164:	4620      	mov	r0, r4
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	200003cc 	.word	0x200003cc

0800516c <_malloc_r>:
 800516c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005170:	1ccd      	adds	r5, r1, #3
 8005172:	f025 0503 	bic.w	r5, r5, #3
 8005176:	3508      	adds	r5, #8
 8005178:	2d0c      	cmp	r5, #12
 800517a:	bf38      	it	cc
 800517c:	250c      	movcc	r5, #12
 800517e:	2d00      	cmp	r5, #0
 8005180:	4607      	mov	r7, r0
 8005182:	db01      	blt.n	8005188 <_malloc_r+0x1c>
 8005184:	42a9      	cmp	r1, r5
 8005186:	d905      	bls.n	8005194 <_malloc_r+0x28>
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	2600      	movs	r6, #0
 800518e:	4630      	mov	r0, r6
 8005190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005268 <_malloc_r+0xfc>
 8005198:	f000 f868 	bl	800526c <__malloc_lock>
 800519c:	f8d8 3000 	ldr.w	r3, [r8]
 80051a0:	461c      	mov	r4, r3
 80051a2:	bb5c      	cbnz	r4, 80051fc <_malloc_r+0x90>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ffc0 	bl	800512c <sbrk_aligned>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	4604      	mov	r4, r0
 80051b0:	d155      	bne.n	800525e <_malloc_r+0xf2>
 80051b2:	f8d8 4000 	ldr.w	r4, [r8]
 80051b6:	4626      	mov	r6, r4
 80051b8:	2e00      	cmp	r6, #0
 80051ba:	d145      	bne.n	8005248 <_malloc_r+0xdc>
 80051bc:	2c00      	cmp	r4, #0
 80051be:	d048      	beq.n	8005252 <_malloc_r+0xe6>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	4631      	mov	r1, r6
 80051c4:	4638      	mov	r0, r7
 80051c6:	eb04 0903 	add.w	r9, r4, r3
 80051ca:	f000 fb5d 	bl	8005888 <_sbrk_r>
 80051ce:	4581      	cmp	r9, r0
 80051d0:	d13f      	bne.n	8005252 <_malloc_r+0xe6>
 80051d2:	6821      	ldr	r1, [r4, #0]
 80051d4:	1a6d      	subs	r5, r5, r1
 80051d6:	4629      	mov	r1, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ffa7 	bl	800512c <sbrk_aligned>
 80051de:	3001      	adds	r0, #1
 80051e0:	d037      	beq.n	8005252 <_malloc_r+0xe6>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	442b      	add	r3, r5
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d038      	beq.n	8005262 <_malloc_r+0xf6>
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	d12b      	bne.n	800524e <_malloc_r+0xe2>
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e00f      	b.n	800521c <_malloc_r+0xb0>
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	1b52      	subs	r2, r2, r5
 8005200:	d41f      	bmi.n	8005242 <_malloc_r+0xd6>
 8005202:	2a0b      	cmp	r2, #11
 8005204:	d917      	bls.n	8005236 <_malloc_r+0xca>
 8005206:	1961      	adds	r1, r4, r5
 8005208:	42a3      	cmp	r3, r4
 800520a:	6025      	str	r5, [r4, #0]
 800520c:	bf18      	it	ne
 800520e:	6059      	strne	r1, [r3, #4]
 8005210:	6863      	ldr	r3, [r4, #4]
 8005212:	bf08      	it	eq
 8005214:	f8c8 1000 	streq.w	r1, [r8]
 8005218:	5162      	str	r2, [r4, r5]
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	4638      	mov	r0, r7
 800521e:	f104 060b 	add.w	r6, r4, #11
 8005222:	f000 f829 	bl	8005278 <__malloc_unlock>
 8005226:	f026 0607 	bic.w	r6, r6, #7
 800522a:	1d23      	adds	r3, r4, #4
 800522c:	1af2      	subs	r2, r6, r3
 800522e:	d0ae      	beq.n	800518e <_malloc_r+0x22>
 8005230:	1b9b      	subs	r3, r3, r6
 8005232:	50a3      	str	r3, [r4, r2]
 8005234:	e7ab      	b.n	800518e <_malloc_r+0x22>
 8005236:	42a3      	cmp	r3, r4
 8005238:	6862      	ldr	r2, [r4, #4]
 800523a:	d1dd      	bne.n	80051f8 <_malloc_r+0x8c>
 800523c:	f8c8 2000 	str.w	r2, [r8]
 8005240:	e7ec      	b.n	800521c <_malloc_r+0xb0>
 8005242:	4623      	mov	r3, r4
 8005244:	6864      	ldr	r4, [r4, #4]
 8005246:	e7ac      	b.n	80051a2 <_malloc_r+0x36>
 8005248:	4634      	mov	r4, r6
 800524a:	6876      	ldr	r6, [r6, #4]
 800524c:	e7b4      	b.n	80051b8 <_malloc_r+0x4c>
 800524e:	4613      	mov	r3, r2
 8005250:	e7cc      	b.n	80051ec <_malloc_r+0x80>
 8005252:	230c      	movs	r3, #12
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4638      	mov	r0, r7
 8005258:	f000 f80e 	bl	8005278 <__malloc_unlock>
 800525c:	e797      	b.n	800518e <_malloc_r+0x22>
 800525e:	6025      	str	r5, [r4, #0]
 8005260:	e7dc      	b.n	800521c <_malloc_r+0xb0>
 8005262:	605b      	str	r3, [r3, #4]
 8005264:	deff      	udf	#255	; 0xff
 8005266:	bf00      	nop
 8005268:	200003c8 	.word	0x200003c8

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f7ff bf0f 	b.w	8005090 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	200003c4 	.word	0x200003c4

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f7ff bf0a 	b.w	8005092 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	200003c4 	.word	0x200003c4

08005284 <__ssputs_r>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	688e      	ldr	r6, [r1, #8]
 800528a:	461f      	mov	r7, r3
 800528c:	42be      	cmp	r6, r7
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	4682      	mov	sl, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4690      	mov	r8, r2
 8005296:	d82c      	bhi.n	80052f2 <__ssputs_r+0x6e>
 8005298:	898a      	ldrh	r2, [r1, #12]
 800529a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800529e:	d026      	beq.n	80052ee <__ssputs_r+0x6a>
 80052a0:	6965      	ldr	r5, [r4, #20]
 80052a2:	6909      	ldr	r1, [r1, #16]
 80052a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a8:	eba3 0901 	sub.w	r9, r3, r1
 80052ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b0:	1c7b      	adds	r3, r7, #1
 80052b2:	444b      	add	r3, r9
 80052b4:	106d      	asrs	r5, r5, #1
 80052b6:	429d      	cmp	r5, r3
 80052b8:	bf38      	it	cc
 80052ba:	461d      	movcc	r5, r3
 80052bc:	0553      	lsls	r3, r2, #21
 80052be:	d527      	bpl.n	8005310 <__ssputs_r+0x8c>
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7ff ff53 	bl	800516c <_malloc_r>
 80052c6:	4606      	mov	r6, r0
 80052c8:	b360      	cbz	r0, 8005324 <__ssputs_r+0xa0>
 80052ca:	6921      	ldr	r1, [r4, #16]
 80052cc:	464a      	mov	r2, r9
 80052ce:	f000 faeb 	bl	80058a8 <memcpy>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	6126      	str	r6, [r4, #16]
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	444e      	add	r6, r9
 80052e4:	eba5 0509 	sub.w	r5, r5, r9
 80052e8:	6026      	str	r6, [r4, #0]
 80052ea:	60a5      	str	r5, [r4, #8]
 80052ec:	463e      	mov	r6, r7
 80052ee:	42be      	cmp	r6, r7
 80052f0:	d900      	bls.n	80052f4 <__ssputs_r+0x70>
 80052f2:	463e      	mov	r6, r7
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	4632      	mov	r2, r6
 80052f8:	4641      	mov	r1, r8
 80052fa:	f000 faab 	bl	8005854 <memmove>
 80052fe:	68a3      	ldr	r3, [r4, #8]
 8005300:	1b9b      	subs	r3, r3, r6
 8005302:	60a3      	str	r3, [r4, #8]
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	4433      	add	r3, r6
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	2000      	movs	r0, #0
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	462a      	mov	r2, r5
 8005312:	f000 fad7 	bl	80058c4 <_realloc_r>
 8005316:	4606      	mov	r6, r0
 8005318:	2800      	cmp	r0, #0
 800531a:	d1e0      	bne.n	80052de <__ssputs_r+0x5a>
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	4650      	mov	r0, sl
 8005320:	f7ff feb8 	bl	8005094 <_free_r>
 8005324:	230c      	movs	r3, #12
 8005326:	f8ca 3000 	str.w	r3, [sl]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	e7e9      	b.n	800530c <__ssputs_r+0x88>

08005338 <_svfiprintf_r>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4698      	mov	r8, r3
 800533e:	898b      	ldrh	r3, [r1, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	4607      	mov	r7, r0
 8005346:	460d      	mov	r5, r1
 8005348:	4614      	mov	r4, r2
 800534a:	d50e      	bpl.n	800536a <_svfiprintf_r+0x32>
 800534c:	690b      	ldr	r3, [r1, #16]
 800534e:	b963      	cbnz	r3, 800536a <_svfiprintf_r+0x32>
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	f7ff ff0b 	bl	800516c <_malloc_r>
 8005356:	6028      	str	r0, [r5, #0]
 8005358:	6128      	str	r0, [r5, #16]
 800535a:	b920      	cbnz	r0, 8005366 <_svfiprintf_r+0x2e>
 800535c:	230c      	movs	r3, #12
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e0d0      	b.n	8005508 <_svfiprintf_r+0x1d0>
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	; 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005520 <_svfiprintf_r+0x1e8>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x5c>
 8005390:	2a25      	cmp	r2, #37	; 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x50>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7a>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6f 	bl	8005284 <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a9 	beq.w	80054fe <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	; 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a1 	beq.w	80054fe <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d2:	931a      	str	r3, [sp, #104]	; 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	4850      	ldr	r0, [pc, #320]	; (8005520 <_svfiprintf_r+0x1e8>)
 80053de:	f7fa fef7 	bl	80001d0 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xe6>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	; 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xf6>
 8005402:	9a07      	ldr	r2, [sp, #28]
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	; 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94d      	bls.n	80054b4 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x110>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x110>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	46a2      	mov	sl, r4
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0x9c>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	; 0x2e
 800544c:	d10c      	bne.n	8005468 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	; 0x2a
 8005452:	d134      	bne.n	80054be <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	bfb8      	it	lt
 8005460:	f04f 33ff 	movlt.w	r3, #4294967295
 8005464:	3402      	adds	r4, #2
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005530 <_svfiprintf_r+0x1f8>
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	2203      	movs	r2, #3
 8005470:	4650      	mov	r0, sl
 8005472:	f7fa fead 	bl	80001d0 <memchr>
 8005476:	b138      	cbz	r0, 8005488 <_svfiprintf_r+0x150>
 8005478:	9b04      	ldr	r3, [sp, #16]
 800547a:	eba0 000a 	sub.w	r0, r0, sl
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	4082      	lsls	r2, r0
 8005482:	4313      	orrs	r3, r2
 8005484:	3401      	adds	r4, #1
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548c:	4825      	ldr	r0, [pc, #148]	; (8005524 <_svfiprintf_r+0x1ec>)
 800548e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005492:	2206      	movs	r2, #6
 8005494:	f7fa fe9c 	bl	80001d0 <memchr>
 8005498:	2800      	cmp	r0, #0
 800549a:	d038      	beq.n	800550e <_svfiprintf_r+0x1d6>
 800549c:	4b22      	ldr	r3, [pc, #136]	; (8005528 <_svfiprintf_r+0x1f0>)
 800549e:	bb1b      	cbnz	r3, 80054e8 <_svfiprintf_r+0x1b0>
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	3307      	adds	r3, #7
 80054a4:	f023 0307 	bic.w	r3, r3, #7
 80054a8:	3308      	adds	r3, #8
 80054aa:	9303      	str	r3, [sp, #12]
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	4433      	add	r3, r6
 80054b0:	9309      	str	r3, [sp, #36]	; 0x24
 80054b2:	e768      	b.n	8005386 <_svfiprintf_r+0x4e>
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	460c      	mov	r4, r1
 80054ba:	2001      	movs	r0, #1
 80054bc:	e7a6      	b.n	800540c <_svfiprintf_r+0xd4>
 80054be:	2300      	movs	r3, #0
 80054c0:	3401      	adds	r4, #1
 80054c2:	9305      	str	r3, [sp, #20]
 80054c4:	4619      	mov	r1, r3
 80054c6:	f04f 0c0a 	mov.w	ip, #10
 80054ca:	4620      	mov	r0, r4
 80054cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d0:	3a30      	subs	r2, #48	; 0x30
 80054d2:	2a09      	cmp	r2, #9
 80054d4:	d903      	bls.n	80054de <_svfiprintf_r+0x1a6>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0c6      	beq.n	8005468 <_svfiprintf_r+0x130>
 80054da:	9105      	str	r1, [sp, #20]
 80054dc:	e7c4      	b.n	8005468 <_svfiprintf_r+0x130>
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	4604      	mov	r4, r0
 80054e4:	2301      	movs	r3, #1
 80054e6:	e7f0      	b.n	80054ca <_svfiprintf_r+0x192>
 80054e8:	ab03      	add	r3, sp, #12
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	462a      	mov	r2, r5
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <_svfiprintf_r+0x1f4>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	4638      	mov	r0, r7
 80054f4:	f3af 8000 	nop.w
 80054f8:	1c42      	adds	r2, r0, #1
 80054fa:	4606      	mov	r6, r0
 80054fc:	d1d6      	bne.n	80054ac <_svfiprintf_r+0x174>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	065b      	lsls	r3, r3, #25
 8005502:	f53f af2d 	bmi.w	8005360 <_svfiprintf_r+0x28>
 8005506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005508:	b01d      	add	sp, #116	; 0x74
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550e:	ab03      	add	r3, sp, #12
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	462a      	mov	r2, r5
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <_svfiprintf_r+0x1f4>)
 8005516:	a904      	add	r1, sp, #16
 8005518:	4638      	mov	r0, r7
 800551a:	f000 f879 	bl	8005610 <_printf_i>
 800551e:	e7eb      	b.n	80054f8 <_svfiprintf_r+0x1c0>
 8005520:	08005980 	.word	0x08005980
 8005524:	0800598a 	.word	0x0800598a
 8005528:	00000000 	.word	0x00000000
 800552c:	08005285 	.word	0x08005285
 8005530:	08005986 	.word	0x08005986

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4699      	mov	r9, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005544:	4293      	cmp	r3, r2
 8005546:	bfb8      	it	lt
 8005548:	4613      	movlt	r3, r2
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005550:	4607      	mov	r7, r0
 8005552:	460c      	mov	r4, r1
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc26      	bgt.n	80055ca <_printf_common+0x96>
 800557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005580:	1e13      	subs	r3, r2, #0
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d42b      	bmi.n	80055e4 <_printf_common+0xb0>
 800558c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005590:	4649      	mov	r1, r9
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d01e      	beq.n	80055d8 <_printf_common+0xa4>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf02      	ittt	eq
 80055a6:	68e5      	ldreq	r5, [r4, #12]
 80055a8:	6833      	ldreq	r3, [r6, #0]
 80055aa:	1aed      	subeq	r5, r5, r3
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	bf0c      	ite	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	2500      	movne	r5, #0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfc4      	itt	gt
 80055ba:	1a9b      	subgt	r3, r3, r2
 80055bc:	18ed      	addgt	r5, r5, r3
 80055be:	2600      	movs	r6, #0
 80055c0:	341a      	adds	r4, #26
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	d11a      	bne.n	80055fc <_printf_common+0xc8>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e008      	b.n	80055dc <_printf_common+0xa8>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4652      	mov	r2, sl
 80055ce:	4649      	mov	r1, r9
 80055d0:	4638      	mov	r0, r7
 80055d2:	47c0      	blx	r8
 80055d4:	3001      	adds	r0, #1
 80055d6:	d103      	bne.n	80055e0 <_printf_common+0xac>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7c6      	b.n	8005572 <_printf_common+0x3e>
 80055e4:	18e1      	adds	r1, r4, r3
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	2030      	movs	r0, #48	; 0x30
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ee:	4422      	add	r2, r4
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f8:	3302      	adds	r3, #2
 80055fa:	e7c7      	b.n	800558c <_printf_common+0x58>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d0e6      	beq.n	80055d8 <_printf_common+0xa4>
 800560a:	3601      	adds	r6, #1
 800560c:	e7d9      	b.n	80055c2 <_printf_common+0x8e>
	...

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005618:	2f78      	cmp	r7, #120	; 0x78
 800561a:	4691      	mov	r9, r2
 800561c:	4680      	mov	r8, r0
 800561e:	460c      	mov	r4, r1
 8005620:	469a      	mov	sl, r3
 8005622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	; 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d4 	beq.w	80057da <_printf_i+0x1ca>
 8005632:	2f58      	cmp	r7, #88	; 0x58
 8005634:	f000 80c0 	beq.w	80057b8 <_printf_i+0x1a8>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	; (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057c1 	.word	0x080057c1
 8005680:	080056e9 	.word	0x080056e9
 8005684:	0800577b 	.word	0x0800577b
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057e3 	.word	0x080057e3
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e9 	.word	0x080056e9
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	08005783 	.word	0x08005783
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09f      	b.n	80057fc <_printf_i+0x1ec>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	0607      	lsls	r7, r0, #24
 80056c2:	f103 0104 	add.w	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	d501      	bpl.n	80056ce <_printf_i+0xbe>
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <_printf_i+0xc6>
 80056ce:	0646      	lsls	r6, r0, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0xba>
 80056d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	da03      	bge.n	80056e2 <_printf_i+0xd2>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	4276      	negs	r6, r6
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	485a      	ldr	r0, [pc, #360]	; (800584c <_printf_i+0x23c>)
 80056e4:	230a      	movs	r3, #10
 80056e6:	e012      	b.n	800570e <_printf_i+0xfe>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	6029      	str	r1, [r5, #0]
 80056f0:	0605      	lsls	r5, r0, #24
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0xe8>
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0xee>
 80056f8:	0641      	lsls	r1, r0, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0xe4>
 80056fc:	881e      	ldrh	r6, [r3, #0]
 80056fe:	4853      	ldr	r0, [pc, #332]	; (800584c <_printf_i+0x23c>)
 8005700:	2f6f      	cmp	r7, #111	; 0x6f
 8005702:	bf0c      	ite	eq
 8005704:	2308      	moveq	r3, #8
 8005706:	230a      	movne	r3, #10
 8005708:	2100      	movs	r1, #0
 800570a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800570e:	6865      	ldr	r5, [r4, #4]
 8005710:	60a5      	str	r5, [r4, #8]
 8005712:	2d00      	cmp	r5, #0
 8005714:	bfa2      	ittt	ge
 8005716:	6821      	ldrge	r1, [r4, #0]
 8005718:	f021 0104 	bicge.w	r1, r1, #4
 800571c:	6021      	strge	r1, [r4, #0]
 800571e:	b90e      	cbnz	r6, 8005724 <_printf_i+0x114>
 8005720:	2d00      	cmp	r5, #0
 8005722:	d04b      	beq.n	80057bc <_printf_i+0x1ac>
 8005724:	4615      	mov	r5, r2
 8005726:	fbb6 f1f3 	udiv	r1, r6, r3
 800572a:	fb03 6711 	mls	r7, r3, r1, r6
 800572e:	5dc7      	ldrb	r7, [r0, r7]
 8005730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005734:	4637      	mov	r7, r6
 8005736:	42bb      	cmp	r3, r7
 8005738:	460e      	mov	r6, r1
 800573a:	d9f4      	bls.n	8005726 <_printf_i+0x116>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d10b      	bne.n	8005758 <_printf_i+0x148>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07de      	lsls	r6, r3, #31
 8005744:	d508      	bpl.n	8005758 <_printf_i+0x148>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4299      	cmp	r1, r3
 800574c:	bfde      	ittt	le
 800574e:	2330      	movle	r3, #48	; 0x30
 8005750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005758:	1b52      	subs	r2, r2, r5
 800575a:	6122      	str	r2, [r4, #16]
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	464b      	mov	r3, r9
 8005762:	aa03      	add	r2, sp, #12
 8005764:	4621      	mov	r1, r4
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fee4 	bl	8005534 <_printf_common>
 800576c:	3001      	adds	r0, #1
 800576e:	d14a      	bne.n	8005806 <_printf_i+0x1f6>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	b004      	add	sp, #16
 8005776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	4833      	ldr	r0, [pc, #204]	; (8005850 <_printf_i+0x240>)
 8005784:	2778      	movs	r7, #120	; 0x78
 8005786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	6829      	ldr	r1, [r5, #0]
 800578e:	061f      	lsls	r7, r3, #24
 8005790:	f851 6b04 	ldr.w	r6, [r1], #4
 8005794:	d402      	bmi.n	800579c <_printf_i+0x18c>
 8005796:	065f      	lsls	r7, r3, #25
 8005798:	bf48      	it	mi
 800579a:	b2b6      	uxthmi	r6, r6
 800579c:	07df      	lsls	r7, r3, #31
 800579e:	bf48      	it	mi
 80057a0:	f043 0320 	orrmi.w	r3, r3, #32
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	bf48      	it	mi
 80057a8:	6023      	strmi	r3, [r4, #0]
 80057aa:	b91e      	cbnz	r6, 80057b4 <_printf_i+0x1a4>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f023 0320 	bic.w	r3, r3, #32
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	2310      	movs	r3, #16
 80057b6:	e7a7      	b.n	8005708 <_printf_i+0xf8>
 80057b8:	4824      	ldr	r0, [pc, #144]	; (800584c <_printf_i+0x23c>)
 80057ba:	e7e4      	b.n	8005786 <_printf_i+0x176>
 80057bc:	4615      	mov	r5, r2
 80057be:	e7bd      	b.n	800573c <_printf_i+0x12c>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	6826      	ldr	r6, [r4, #0]
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6028      	str	r0, [r5, #0]
 80057ca:	0635      	lsls	r5, r6, #24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0x1c4>
 80057d0:	6019      	str	r1, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0x1ca>
 80057d4:	0670      	lsls	r0, r6, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0x1c0>
 80057d8:	8019      	strh	r1, [r3, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	4615      	mov	r5, r2
 80057e0:	e7bc      	b.n	800575c <_printf_i+0x14c>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	602a      	str	r2, [r5, #0]
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	2100      	movs	r1, #0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7fa fcee 	bl	80001d0 <memchr>
 80057f4:	b108      	cbz	r0, 80057fa <_printf_i+0x1ea>
 80057f6:	1b40      	subs	r0, r0, r5
 80057f8:	6060      	str	r0, [r4, #4]
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	2300      	movs	r3, #0
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	e7aa      	b.n	800575c <_printf_i+0x14c>
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	462a      	mov	r2, r5
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	47d0      	blx	sl
 8005810:	3001      	adds	r0, #1
 8005812:	d0ad      	beq.n	8005770 <_printf_i+0x160>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	079b      	lsls	r3, r3, #30
 8005818:	d413      	bmi.n	8005842 <_printf_i+0x232>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	4298      	cmp	r0, r3
 8005820:	bfb8      	it	lt
 8005822:	4618      	movlt	r0, r3
 8005824:	e7a6      	b.n	8005774 <_printf_i+0x164>
 8005826:	2301      	movs	r3, #1
 8005828:	4632      	mov	r2, r6
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d09d      	beq.n	8005770 <_printf_i+0x160>
 8005834:	3501      	adds	r5, #1
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	9903      	ldr	r1, [sp, #12]
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	42ab      	cmp	r3, r5
 800583e:	dcf2      	bgt.n	8005826 <_printf_i+0x216>
 8005840:	e7eb      	b.n	800581a <_printf_i+0x20a>
 8005842:	2500      	movs	r5, #0
 8005844:	f104 0619 	add.w	r6, r4, #25
 8005848:	e7f5      	b.n	8005836 <_printf_i+0x226>
 800584a:	bf00      	nop
 800584c:	08005991 	.word	0x08005991
 8005850:	080059a2 	.word	0x080059a2

08005854 <memmove>:
 8005854:	4288      	cmp	r0, r1
 8005856:	b510      	push	{r4, lr}
 8005858:	eb01 0402 	add.w	r4, r1, r2
 800585c:	d902      	bls.n	8005864 <memmove+0x10>
 800585e:	4284      	cmp	r4, r0
 8005860:	4623      	mov	r3, r4
 8005862:	d807      	bhi.n	8005874 <memmove+0x20>
 8005864:	1e43      	subs	r3, r0, #1
 8005866:	42a1      	cmp	r1, r4
 8005868:	d008      	beq.n	800587c <memmove+0x28>
 800586a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005872:	e7f8      	b.n	8005866 <memmove+0x12>
 8005874:	4402      	add	r2, r0
 8005876:	4601      	mov	r1, r0
 8005878:	428a      	cmp	r2, r1
 800587a:	d100      	bne.n	800587e <memmove+0x2a>
 800587c:	bd10      	pop	{r4, pc}
 800587e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005886:	e7f7      	b.n	8005878 <memmove+0x24>

08005888 <_sbrk_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d06      	ldr	r5, [pc, #24]	; (80058a4 <_sbrk_r+0x1c>)
 800588c:	2300      	movs	r3, #0
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	f7fb fd1c 	bl	80012d0 <_sbrk>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_sbrk_r+0x1a>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_sbrk_r+0x1a>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200003c0 	.word	0x200003c0

080058a8 <memcpy>:
 80058a8:	440a      	add	r2, r1
 80058aa:	4291      	cmp	r1, r2
 80058ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80058b0:	d100      	bne.n	80058b4 <memcpy+0xc>
 80058b2:	4770      	bx	lr
 80058b4:	b510      	push	{r4, lr}
 80058b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058be:	4291      	cmp	r1, r2
 80058c0:	d1f9      	bne.n	80058b6 <memcpy+0xe>
 80058c2:	bd10      	pop	{r4, pc}

080058c4 <_realloc_r>:
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4680      	mov	r8, r0
 80058ca:	4614      	mov	r4, r2
 80058cc:	460e      	mov	r6, r1
 80058ce:	b921      	cbnz	r1, 80058da <_realloc_r+0x16>
 80058d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d4:	4611      	mov	r1, r2
 80058d6:	f7ff bc49 	b.w	800516c <_malloc_r>
 80058da:	b92a      	cbnz	r2, 80058e8 <_realloc_r+0x24>
 80058dc:	f7ff fbda 	bl	8005094 <_free_r>
 80058e0:	4625      	mov	r5, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	f000 f81b 	bl	8005922 <_malloc_usable_size_r>
 80058ec:	4284      	cmp	r4, r0
 80058ee:	4607      	mov	r7, r0
 80058f0:	d802      	bhi.n	80058f8 <_realloc_r+0x34>
 80058f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058f6:	d812      	bhi.n	800591e <_realloc_r+0x5a>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff fc36 	bl	800516c <_malloc_r>
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0ed      	beq.n	80058e2 <_realloc_r+0x1e>
 8005906:	42bc      	cmp	r4, r7
 8005908:	4622      	mov	r2, r4
 800590a:	4631      	mov	r1, r6
 800590c:	bf28      	it	cs
 800590e:	463a      	movcs	r2, r7
 8005910:	f7ff ffca 	bl	80058a8 <memcpy>
 8005914:	4631      	mov	r1, r6
 8005916:	4640      	mov	r0, r8
 8005918:	f7ff fbbc 	bl	8005094 <_free_r>
 800591c:	e7e1      	b.n	80058e2 <_realloc_r+0x1e>
 800591e:	4635      	mov	r5, r6
 8005920:	e7df      	b.n	80058e2 <_realloc_r+0x1e>

08005922 <_malloc_usable_size_r>:
 8005922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005926:	1f18      	subs	r0, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfbc      	itt	lt
 800592c:	580b      	ldrlt	r3, [r1, r0]
 800592e:	18c0      	addlt	r0, r0, r3
 8005930:	4770      	bx	lr
	...

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
