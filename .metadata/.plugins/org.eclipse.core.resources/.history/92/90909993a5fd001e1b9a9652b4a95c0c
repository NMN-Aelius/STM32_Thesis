/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>   // Thu vien ham tinh toan co ban
#include <stdbool.h> // Thu vien khai bao kieu bool
#include <string.h>  // Thu vien khai bao string
#include <stdlib.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/// ===================================================================================================Node 2======================================================:
CAN_TxHeaderTypeDef TX_CAN_HEADER;
CAN_RxHeaderTypeDef RX_CAN_HEADER;
CAN_FilterTypeDef canfilterconfig;
uint32_t TxMailbox;
uint8_t CAN_data_Rx[8]; // 8 byte for one Message
bool flag_run = false;
bool flag_send = false;
//================================================================
char data_saving[8];

bool flag_Oke = false;
bool flag_timer1 = false;

uint8_t dem_timer = 0, dem_send_data = 0;;
bool flag_enable_send = false;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
volatile short pulseAC;
volatile short pulselink;
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_CAN_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ======================================== DELAY TIMER 4 =========================
void delay_us (uint16_t us)
{
    __HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
    while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
}
// ====================================================== FUNCTION INTERRUPTS TIMER 1 ============================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM1){
		dem_timer++;
		dem_send_data++;
		if(dem_timer >= 3)
		{
			flag_timer1 = true;
			dem_timer = 0;
		}
		if(dem_send_data >= 1)
		{
			flag_enable_send = true;
			dem_send_data = 0;
		}
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM2)
	{
		  pulseAC = __HAL_TIM_GET_COUNTER(&htim2);
		  pulselink = __HAL_TIM_GET_COUNTER(&htim3);
	}
	else if (htim->Instance == TIM3)
	{
		  pulseAC = __HAL_TIM_GET_COUNTER(&htim2);
		  pulselink = __HAL_TIM_GET_COUNTER(&htim3);
	}
}
void Create_pulse_Forward_AC(uint32_t pulse_in, uint32_t time_delay){
	for (int i = 0; i < pulse_in; i++)
	{
		  HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_RESET);
		  delay_us(time_delay);
		  HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
		  delay_us(time_delay);
	}
}
void Create_pulse_Inverse_AC(uint32_t pulse_in, uint32_t time_delay){
	for (int i = 0; i < pulse_in; i++)
	{
		  HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_RESET);
		  delay_us(time_delay);
		  HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_SET);
		  delay_us(time_delay);
	}
}
float theta1 = 0; // unit: deg
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RX_CAN_HEADER, CAN_data_Rx) == HAL_OK)
	{
		switch(RX_CAN_HEADER.StdId){
		case 0x020: // receive to run
			data_saving[0] = CAN_data_Rx[0];
			data_saving[1] = CAN_data_Rx[1];
			data_saving[2] = CAN_data_Rx[2];
			data_saving[3] = CAN_data_Rx[3];
			data_saving[4] = CAN_data_Rx[4];
			data_saving[5] = CAN_data_Rx[5];
			data_saving[6] = CAN_data_Rx[6];
			data_saving[7] = CAN_data_Rx[7];
			// flag having data
			break;
		case 0x000: // request send data to master
			// flag send data to master: run program
			if(CAN_data_Rx[0] == 's')
				flag_run = true;
			else if(CAN_data_Rx[0] == '6')
				flag_send = true;
			else if(CAN_data_Rx[0] == 'r')
			{
				TIM2->CNT=0;
				TIM3->CNT=0;
				pulseAC = 0;
				pulselink = 0;
				theta1 = 0;
			}
			break;
		}
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_CAN_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_Base_Start_IT(&htim1);

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);

  HAL_CAN_Start(&hcan);


  HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, PG_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, NG_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float pulse_end = 0;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pulseAC = __HAL_TIM_GET_COUNTER(&htim2);
	  pulselink = __HAL_TIM_GET_COUNTER(&htim3);
	  if(flag_timer1 == true){
	  		  flag_timer1 = false;
	  		  ////=================================================
	  		  float theta1_temp = 0;
	  		  // convert
	  		if(flag_run == true){
			  flag_run = false;
			  theta1_temp = atoi(data_saving);
			  // calculate delta angle
			  float delta_angle = theta1_temp/100 - theta1; // chỗ này kiểu flaot
			  // calculate pulse
			  float pulse_temp = delta_angle*15000/360;  // delta*Xung 1 vong hop so/360
			  /* --------- Function--------
			   * Calculate the new pulse-*/
			  pulse_end = pulse_end + (pulse_temp - (int32_t)pulse_temp); // KQ = 12.123 - 12 = 0.123 --------- update pulse_end

			  int32_t pulse_supply = delta_angle*15000/360 + (int32_t)pulse_end/1; // ep kieu lam  tron so
			  pulse_end = pulse_end - (int32_t)pulse_end/1; // calculate pulse end

			  if(pulse_supply > 0)
				  Create_pulse_Forward_AC(abs(pulse_supply), 25);
			  else
				  Create_pulse_Inverse_AC(abs(pulse_supply), 25);
			  // update value angle
			  theta1 = theta1 + delta_angle;
		  }
	  }
	  //////========================================= send data to master and Node 2================================
	  if(flag_send == true && flag_enable_send == true){
		  flag_send = false;
		  flag_enable_send = false;
		  // read encoder
		  pulseAC = __HAL_TIM_GET_COUNTER(&htim2);         pulselink = __HAL_TIM_GET_COUNTER(&htim3);
		  // convert to angle
		  int angleAC = pulseAC*100*360/4050;    // AC         - x100
		  int anglelink = pulselink*100*360/(4*1000);    // link   - x100
		  // convert to array
		  /*--- Example pulseAC = 198; pulselink = 732;
		   *
		   * -*/
		  int phan_nguyen_angleAC = abs(angleAC/100); // 2 số đầu
		  int phan_thap_phan_angleAC = abs(angleAC%100); // 2 sô sau

		  int phan_nguyen_anglelink = abs(anglelink/100); // 2 số đầu
		  int phan_thap_phan_anglelink = abs(anglelink%100); // 2 sô sau

		  // send data to master: 2 message
		  uint8_t data1[6];
		  data1[0] = phan_thap_phan_angleAC%10;
		  data1[1] = phan_thap_phan_angleAC/10;
		  data1[2] = phan_nguyen_angleAC%10;
		  data1[3] = phan_nguyen_angleAC/10;
		  if(angleAC < 0) data1[4] = '-';
		  else	data1[4] = '+';
		  data1[5] = 'c';
		  TX_CAN_HEADER.StdId = 0x020;
		  HAL_CAN_AddTxMessage(&hcan, &TX_CAN_HEADER, data1, &TxMailbox);
		  delay_us(300);

		  uint8_t data2[6];
		  data2[0] = phan_thap_phan_anglelink%10;
		  data2[1] = phan_thap_phan_anglelink/10;
		  data2[2] = phan_nguyen_anglelink%10;
		  data2[3] = phan_nguyen_anglelink/10;
		  if(anglelink < 0) data2[4] = '-';
		  else	data2[4] = '+';
		  data2[5] = 'l';
		  TX_CAN_HEADER.StdId = 0x020;
		  HAL_CAN_AddTxMessage(&hcan, &TX_CAN_HEADER, data2, &TxMailbox);
		  delay_us(300);
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 6;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
      canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
      canfilterconfig.FilterIdHigh = 0x0020 << 5;
      canfilterconfig.FilterIdLow = 0x0000;
      canfilterconfig.FilterMaskIdHigh = 0xffdf << 5;
      canfilterconfig.FilterMaskIdLow = 0x0000;
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
      canfilterconfig.SlaveStartFilterBank = 1;
      if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) // add
      {
      	Error_Handler();
      }
        /* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
      TX_CAN_HEADER.RTR=CAN_RTR_DATA; //Remote transmission request = Data frame
      TX_CAN_HEADER.IDE=CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
      TX_CAN_HEADER.DLC=8;
      TX_CAN_HEADER.StdId = 0x020;   // Node 1:
      HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts

  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 71;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NG_Pin|NP_Pin|PG_Pin|PP_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : NG_Pin NP_Pin PG_Pin PP_Pin */
  GPIO_InitStruct.Pin = NG_Pin|NP_Pin|PG_Pin|PP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
