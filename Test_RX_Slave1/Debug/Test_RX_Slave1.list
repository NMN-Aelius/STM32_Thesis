
Test_RX_Slave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e0  080040e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080040e0  080040e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e0  080040e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000010  080040f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080040f8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0d7  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f13  00000000  00000000  0002e153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00030068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afe  00000000  00000000  00030e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fd1  00000000  00000000  0003193e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed51  00000000  00000000  0004990f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d5c7  00000000  00000000  00058660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ab8  00000000  00000000  000e5c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e96e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800409c 	.word	0x0800409c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800409c 	.word	0x0800409c

0800014c <getCheckSum>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//=================STEP MOTOR ENCODER (Checked)
uint8_t getCheckSum(uint8_t *buffer,uint8_t size)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	uint16_t sum=0;
 8000158:	2300      	movs	r3, #0
 800015a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0 ;i < size;i++)
 800015c:	2300      	movs	r3, #0
 800015e:	737b      	strb	r3, [r7, #13]
 8000160:	e00a      	b.n	8000178 <getCheckSum+0x2c>
	{
		sum += buffer[i];
 8000162:	7b7b      	ldrb	r3, [r7, #13]
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	b29a      	uxth	r2, r3
 800016c:	89fb      	ldrh	r3, [r7, #14]
 800016e:	4413      	add	r3, r2
 8000170:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0 ;i < size;i++)
 8000172:	7b7b      	ldrb	r3, [r7, #13]
 8000174:	3301      	adds	r3, #1
 8000176:	737b      	strb	r3, [r7, #13]
 8000178:	7b7a      	ldrb	r2, [r7, #13]
 800017a:	78fb      	ldrb	r3, [r7, #3]
 800017c:	429a      	cmp	r2, r3
 800017e:	d3f0      	bcc.n	8000162 <getCheckSum+0x16>
	}
	return(sum&0xFF);
 8000180:	89fb      	ldrh	r3, [r7, #14]
 8000182:	b2db      	uxtb	r3, r3
}
 8000184:	4618      	mov	r0, r3
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
	...

08000190 <ReadUart>:
void ReadUart(uint8_t l_sAddress)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	TxDataUart[0] = 0xFA;
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <ReadUart+0x40>)
 800019c:	22fa      	movs	r2, #250	; 0xfa
 800019e:	701a      	strb	r2, [r3, #0]
	TxDataUart[1] = l_sAddress;
 80001a0:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <ReadUart+0x40>)
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	7053      	strb	r3, [r2, #1]
	TxDataUart[2] = 0x31; // Position read mode int32 (4 bytes data last)
 80001a6:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <ReadUart+0x40>)
 80001a8:	2231      	movs	r2, #49	; 0x31
 80001aa:	709a      	strb	r2, [r3, #2]
	TxDataUart[3] = getCheckSum(TxDataUart,TxBufferSize-1);
 80001ac:	2103      	movs	r1, #3
 80001ae:	4808      	ldr	r0, [pc, #32]	; (80001d0 <ReadUart+0x40>)
 80001b0:	f7ff ffcc 	bl	800014c <getCheckSum>
 80001b4:	4603      	mov	r3, r0
 80001b6:	461a      	mov	r2, r3
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <ReadUart+0x40>)
 80001ba:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit_IT(&huart1, TxDataUart, TxBufferSize);
 80001bc:	2204      	movs	r2, #4
 80001be:	4904      	ldr	r1, [pc, #16]	; (80001d0 <ReadUart+0x40>)
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ReadUart+0x44>)
 80001c2:	f003 f9d3 	bl	800356c <HAL_UART_Transmit_IT>

	//	flag_stateUart = UART_NOT_OK; // cho reset flag khi nhan du lieu len
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	20000088 	.word	0x20000088
 80001d4:	200001f8 	.word	0x200001f8

080001d8 <HAL_UART_RxCpltCallback>:
		}
	}
}
//=================TIMER1 TIMER MODE SAMPLE TIME (checked)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive_IT(&huart1, RxDataUart, RxBufferSize) == HAL_OK)
 80001e0:	220a      	movs	r2, #10
 80001e2:	4931      	ldr	r1, [pc, #196]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 80001e4:	4831      	ldr	r0, [pc, #196]	; (80002ac <HAL_UART_RxCpltCallback+0xd4>)
 80001e6:	f003 f9f6 	bl	80035d6 <HAL_UART_Receive_IT>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d156      	bne.n	800029e <HAL_UART_RxCpltCallback+0xc6>
	{
		flag_stateUart = UART_OK;
 80001f0:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <HAL_UART_RxCpltCallback+0xd8>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
		if(RxDataUart[0] == 251 && RxDataUart[1] == 1 && RxDataUart [2] == 49)
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2bfb      	cmp	r3, #251	; 0xfb
 80001fc:	d143      	bne.n	8000286 <HAL_UART_RxCpltCallback+0xae>
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d13f      	bne.n	8000286 <HAL_UART_RxCpltCallback+0xae>
 8000206:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000208:	789b      	ldrb	r3, [r3, #2]
 800020a:	2b31      	cmp	r3, #49	; 0x31
 800020c:	d13b      	bne.n	8000286 <HAL_UART_RxCpltCallback+0xae>
		{
			Check_Data = 1;
 800020e:	4b29      	ldr	r3, [pc, #164]	; (80002b4 <HAL_UART_RxCpltCallback+0xdc>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
			if(RxDataUart[3] == 255)
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000216:	78db      	ldrb	r3, [r3, #3]
 8000218:	2bff      	cmp	r3, #255	; 0xff
 800021a:	d130      	bne.n	800027e <HAL_UART_RxCpltCallback+0xa6>
			{
				RxDataUart[3] = (~RxDataUart[3]) & 0xFF;
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800021e:	78db      	ldrb	r3, [r3, #3]
 8000220:	43db      	mvns	r3, r3
 8000222:	b2da      	uxtb	r2, r3
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000226:	70da      	strb	r2, [r3, #3]
				RxDataUart[4] = (~RxDataUart[4]) & 0xFF;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800022a:	791b      	ldrb	r3, [r3, #4]
 800022c:	43db      	mvns	r3, r3
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000232:	711a      	strb	r2, [r3, #4]
				RxDataUart[5] = (~RxDataUart[5]) & 0xFF;
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000236:	795b      	ldrb	r3, [r3, #5]
 8000238:	43db      	mvns	r3, r3
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800023e:	715a      	strb	r2, [r3, #5]
				RxDataUart[6] = (~RxDataUart[6]) & 0xFF;
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000242:	799b      	ldrb	r3, [r3, #6]
 8000244:	43db      	mvns	r3, r3
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800024a:	719a      	strb	r2, [r3, #6]
				RxDataUart[7] = (~RxDataUart[7]) & 0xFF;
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800024e:	79db      	ldrb	r3, [r3, #7]
 8000250:	43db      	mvns	r3, r3
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000256:	71da      	strb	r2, [r3, #7]
				RxDataUart[8] = (~RxDataUart[8]) & 0xFF;
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800025a:	7a1b      	ldrb	r3, [r3, #8]
 800025c:	43db      	mvns	r3, r3
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000262:	721a      	strb	r2, [r3, #8]
				RxDataUart[9] = getCheckSum(RxDataUart, RxBufferSize-1);
 8000264:	2109      	movs	r1, #9
 8000266:	4810      	ldr	r0, [pc, #64]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000268:	f7ff ff70 	bl	800014c <getCheckSum>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 8000272:	725a      	strb	r2, [r3, #9]
				sign = -1;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000276:	f04f 32ff 	mov.w	r2, #4294967295
 800027a:	601a      	str	r2, [r3, #0]
			if(RxDataUart[3] == 255)
 800027c:	e00f      	b.n	800029e <HAL_UART_RxCpltCallback+0xc6>
			}
			else
			{
				sign = 1;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000280:	2201      	movs	r2, #1
 8000282:	601a      	str	r2, [r3, #0]
			if(RxDataUart[3] == 255)
 8000284:	e00b      	b.n	800029e <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			memset(RxDataUart, 0x00,  RxBufferSize);
 8000286:	220a      	movs	r2, #10
 8000288:	2100      	movs	r1, #0
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <HAL_UART_RxCpltCallback+0xd0>)
 800028c:	f003 feda 	bl	8004044 <memset>
			ReadUart(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff7d 	bl	8000190 <ReadUart>
			flag_stateUart=UART_NOT_OK;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_UART_RxCpltCallback+0xd8>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800029c:	e7ff      	b.n	800029e <HAL_UART_RxCpltCallback+0xc6>
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000008c 	.word	0x2000008c
 80002ac:	200001f8 	.word	0x200001f8
 80002b0:	20000000 	.word	0x20000000
 80002b4:	200000a8 	.word	0x200000a8
 80002b8:	20000098 	.word	0x20000098

080002bc <HAL_TIM_PeriodElapsedCallback>:
//=================TIMER1 TIMER MODE SAMPLE TIME (checked)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d12f      	bne.n	800032e <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		countSampleTime++;
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002d8:	701a      	strb	r2, [r3, #0]
		countSendData++;
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002e4:	701a      	strb	r2, [r3, #0]
		countCallEncoderSTP++;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002f0:	701a      	strb	r2, [r3, #0]
		if(countSampleTime >= 3)
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d905      	bls.n	8000306 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			flag_timer1 = true;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
			countSampleTime = 0;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
		}
		if(countSendData >= 1)
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d005      	beq.n	800031a <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			flag_enable_send = true;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
			countSendData = 0;
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
		}
		if(countCallEncoderSTP >= 10)
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b09      	cmp	r3, #9
 8000320:	d905      	bls.n	800032e <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			countCallEncoderSTP=0;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
			flag_readUartData = 1;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40012c00 	.word	0x40012c00
 800033c:	200000ab 	.word	0x200000ab
 8000340:	200000ac 	.word	0x200000ac
 8000344:	20000096 	.word	0x20000096
 8000348:	200000a9 	.word	0x200000a9
 800034c:	200000aa 	.word	0x200000aa
 8000350:	2000009c 	.word	0x2000009c

08000354 <HAL_TIM_PWM_PulseFinishedCallback>:
//=================TIMER2 EXTERNAL COUNTER MODE ENCODER (Checked)
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000364:	d105      	bne.n	8000372 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
	{
		ExternalPulse = __HAL_TIM_GET_COUNTER(&htim2);
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036c:	b21a      	sxth	r2, r3
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000370:	801a      	strh	r2, [r3, #0]
	}
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	20000120 	.word	0x20000120
 8000380:	200000ae 	.word	0x200000ae

08000384 <HAL_CAN_RxFifo0MsgPendingCallback>:
//=================INTERRUPT CAN RECEIVE MESSAGE (Checked)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RX_CAN_HEADER, CAN_Data_Rx) == HAL_OK)
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000390:	2100      	movs	r1, #0
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 fff8 	bl	8001388 <HAL_CAN_GetRxMessage>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d10c      	bne.n	80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4809      	ldr	r0, [pc, #36]	; (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80003a4:	f001 feb6 	bl	8002114 <HAL_GPIO_TogglePin>
		if(RX_CAN_HEADER.StdId == 0x001)
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d103      	bne.n	80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80003b0:	2104      	movs	r1, #4
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80003b4:	f001 feae 	bl	8002114 <HAL_GPIO_TogglePin>
		}
	}
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000a0 	.word	0x200000a0
 80003c4:	20000044 	.word	0x20000044
 80003c8:	40011000 	.word	0x40011000
 80003cc:	40010800 	.word	0x40010800

080003d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003d4:	f000 fd4a 	bl	8000e6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003d8:	f000 f860 	bl	800049c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003dc:	f000 fa80 	bl	80008e0 <MX_GPIO_Init>
	MX_TIM1_Init();
 80003e0:	f000 f90e 	bl	8000600 <MX_TIM1_Init>
	MX_TIM2_Init();
 80003e4:	f000 f95c 	bl	80006a0 <MX_TIM2_Init>
	MX_TIM3_Init();
 80003e8:	f000 f9ae 	bl	8000748 <MX_TIM3_Init>
	MX_TIM4_Init();
 80003ec:	f000 fa00 	bl	80007f0 <MX_TIM4_Init>
	MX_CAN_Init();
 80003f0:	f000 f89a 	bl	8000528 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80003f4:	f000 fa4a 	bl	800088c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	//========CAN
	HAL_CAN_Start(&hcan);
 80003f8:	481f      	ldr	r0, [pc, #124]	; (8000478 <main+0xa8>)
 80003fa:	f000 ff81 	bl	8001300 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts
 80003fe:	2102      	movs	r1, #2
 8000400:	481d      	ldr	r0, [pc, #116]	; (8000478 <main+0xa8>)
 8000402:	f001 f8e2 	bl	80015ca <HAL_CAN_ActivateNotification>

	//========TIMER AND COUNTER
	HAL_TIM_Base_Start(&htim4);
 8000406:	481d      	ldr	r0, [pc, #116]	; (800047c <main+0xac>)
 8000408:	f002 fafe 	bl	8002a08 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 800040c:	481c      	ldr	r0, [pc, #112]	; (8000480 <main+0xb0>)
 800040e:	f002 fb45 	bl	8002a9c <HAL_TIM_Base_Start_IT>

	//========UART
	HAL_UART_Receive_IT(&huart1, RxDataUart, RxBufferSize);
 8000412:	220a      	movs	r2, #10
 8000414:	491b      	ldr	r1, [pc, #108]	; (8000484 <main+0xb4>)
 8000416:	481c      	ldr	r0, [pc, #112]	; (8000488 <main+0xb8>)
 8000418:	f003 f8dd 	bl	80035d6 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f000 fd87 	bl	8000f30 <HAL_Delay>

	//========ENCODER
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000422:	2104      	movs	r1, #4
 8000424:	4819      	ldr	r0, [pc, #100]	; (800048c <main+0xbc>)
 8000426:	f002 fc2d 	bl	8002c84 <HAL_TIM_Encoder_Start_IT>

	//========SET DEFAULT PIN MODE
	HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000430:	4817      	ldr	r0, [pc, #92]	; (8000490 <main+0xc0>)
 8000432:	f001 fe57 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PG_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <main+0xc0>)
 800043e:	f001 fe51 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <main+0xc0>)
 800044a:	f001 fe4b 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NG_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000454:	480e      	ldr	r0, [pc, #56]	; (8000490 <main+0xc0>)
 8000456:	f001 fe45 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <main+0xc4>)
 8000462:	f001 fe3f 	bl	80020e4 <HAL_GPIO_WritePin>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if(flag_timer1 == true)
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <main+0xc8>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0fb      	beq.n	8000466 <main+0x96>
		{
			flag_timer1 = false;
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <main+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
		if(flag_timer1 == true)
 8000474:	e7f7      	b.n	8000466 <main+0x96>
 8000476:	bf00      	nop
 8000478:	200000b0 	.word	0x200000b0
 800047c:	200001b0 	.word	0x200001b0
 8000480:	200000d8 	.word	0x200000d8
 8000484:	2000008c 	.word	0x2000008c
 8000488:	200001f8 	.word	0x200001f8
 800048c:	20000120 	.word	0x20000120
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40011000 	.word	0x40011000
 8000498:	200000a9 	.word	0x200000a9

0800049c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b090      	sub	sp, #64	; 0x40
 80004a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fdca 	bl	8004044 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	2301      	movs	r3, #1
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fe2f 	bl	8002148 <HAL_RCC_OscConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80004f0:	f000 fa8e 	bl	8000a10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f4:	230f      	movs	r3, #15
 80004f6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f8:	2302      	movs	r3, #2
 80004fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000504:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2102      	movs	r1, #2
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f89c 	bl	800264c <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x82>
	{
		Error_Handler();
 800051a:	f000 fa79 	bl	8000a10 <Error_Handler>
	}
}
 800051e:	bf00      	nop
 8000520:	3740      	adds	r7, #64	; 0x40
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_CAN_Init+0xc4>)
 800052e:	4a30      	ldr	r2, [pc, #192]	; (80005f0 <MX_CAN_Init+0xc8>)
 8000530:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8000532:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <MX_CAN_Init+0xc4>)
 8000534:	2206      	movs	r2, #6
 8000536:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <MX_CAN_Init+0xc4>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_CAN_Init+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_CAN_Init+0xc4>)
 8000546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800054a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <MX_CAN_Init+0xc4>)
 800054e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000552:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_CAN_Init+0xc4>)
 8000556:	2200      	movs	r2, #0
 8000558:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_CAN_Init+0xc4>)
 800055c:	2200      	movs	r2, #0
 800055e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <MX_CAN_Init+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_CAN_Init+0xc4>)
 8000568:	2200      	movs	r2, #0
 800056a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_CAN_Init+0xc4>)
 800056e:	2200      	movs	r2, #0
 8000570:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_CAN_Init+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000578:	481c      	ldr	r0, [pc, #112]	; (80005ec <MX_CAN_Init+0xc4>)
 800057a:	f000 fcfd 	bl	8000f78 <HAL_CAN_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000584:	f000 fa44 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_CAN_Init+0xcc>)
 800058a:	2201      	movs	r2, #1
 800058c:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_CAN_Init+0xcc>)
 8000590:	2201      	movs	r2, #1
 8000592:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_CAN_Init+0xcc>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x001 << 5;
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_CAN_Init+0xcc>)
 800059c:	2220      	movs	r2, #32
 800059e:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x000;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xffe << 5;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_CAN_Init+0xd0>)
 80005aa:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x000;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 1;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) // add
 80005c4:	490b      	ldr	r1, [pc, #44]	; (80005f4 <MX_CAN_Init+0xcc>)
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <MX_CAN_Init+0xc4>)
 80005c8:	f000 fdd1 	bl	800116e <HAL_CAN_ConfigFilter>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_CAN_Init+0xae>
	{
		Error_Handler();
 80005d2:	f000 fa1d 	bl	8000a10 <Error_Handler>
	}
	/* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
	TX_CAN_HEADER.RTR= CAN_RTR_DATA; //Remote transmission request = Data frame
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_CAN_Init+0xd4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	TX_CAN_HEADER.IDE= CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_CAN_Init+0xd4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	TX_CAN_HEADER.DLC= 6;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_CAN_Init+0xd4>)
 80005e4:	2206      	movs	r2, #6
 80005e6:	611a      	str	r2, [r3, #16]

	/* USER CODE END CAN_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000b0 	.word	0x200000b0
 80005f0:	40006400 	.word	0x40006400
 80005f4:	20000060 	.word	0x20000060
 80005f8:	0001ffc0 	.word	0x0001ffc0
 80005fc:	2000002c 	.word	0x2000002c

08000600 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_TIM1_Init+0x98>)
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <MX_TIM1_Init+0x9c>)
 8000620:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM1_Init+0x98>)
 8000624:	2247      	movs	r2, #71	; 0x47
 8000626:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_TIM1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM1_Init+0x98>)
 8000630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000634:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_TIM1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_TIM1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_TIM1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <MX_TIM1_Init+0x98>)
 800064a:	f002 f98d 	bl	8002968 <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000654:	f000 f9dc 	bl	8000a10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_TIM1_Init+0x98>)
 8000666:	f002 fcc3 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8000670:	f000 f9ce 	bl	8000a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_TIM1_Init+0x98>)
 8000682:	f002 feb3 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 800068c:	f000 f9c0 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000d8 	.word	0x200000d8
 800069c:	40012c00 	.word	0x40012c00

080006a0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2224      	movs	r2, #36	; 0x24
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fcc8 	bl	8004044 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_TIM2_Init+0xa4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006e4:	2303      	movs	r3, #3
 80006e6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ec:	2301      	movs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006fc:	2301      	movs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_TIM2_Init+0xa4>)
 8000710:	f002 fa16 	bl	8002b40 <HAL_TIM_Encoder_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800071a:	f000 f979 	bl	8000a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800071e:	2310      	movs	r3, #16
 8000720:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_TIM2_Init+0xa4>)
 800072c:	f002 fe5e 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8000736:	f000 f96b 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	; 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000120 	.word	0x20000120

08000748 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2224      	movs	r2, #36	; 0x24
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fc74 	bl	8004044 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_TIM3_Init+0xa4>)
 8000768:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_TIM3_Init+0xa0>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_TIM3_Init+0xa0>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800078a:	2303      	movs	r3, #3
 800078c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800079e:	2302      	movs	r3, #2
 80007a0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_TIM3_Init+0xa0>)
 80007b6:	f002 f9c3 	bl	8002b40 <HAL_TIM_Encoder_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80007c0:	f000 f926 	bl	8000a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_TIM3_Init+0xa0>)
 80007d2:	f002 fe0b 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 80007dc:	f000 f918 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3730      	adds	r7, #48	; 0x30
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000168 	.word	0x20000168
 80007ec:	40000400 	.word	0x40000400

080007f0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM4_Init+0x94>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_TIM4_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 71;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM4_Init+0x94>)
 8000814:	2247      	movs	r2, #71	; 0x47
 8000816:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM4_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM4_Init+0x94>)
 8000820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000824:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM4_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <MX_TIM4_Init+0x94>)
 8000834:	f002 f898 	bl	8002968 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 800083e:	f000 f8e7 	bl	8000a10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM4_Init+0x94>)
 8000850:	f002 fbce 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 800085a:	f000 f8d9 	bl	8000a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM4_Init+0x94>)
 800086c:	f002 fdbe 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8000876:	f000 f8cb 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001b0 	.word	0x200001b0
 8000888:	40000800 	.word	0x40000800

0800088c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f002 fe02 	bl	80034cc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80008ce:	f000 f89f 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001f8 	.word	0x200001f8
 80008dc:	40013800 	.word	0x40013800

080008e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <MX_GPIO_Init+0x120>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a41      	ldr	r2, [pc, #260]	; (8000a00 <MX_GPIO_Init+0x120>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800090c:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <MX_GPIO_Init+0x120>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a3b      	ldr	r2, [pc, #236]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000912:	f043 0320 	orr.w	r3, r3, #32
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x120>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0320 	and.w	r3, r3, #32
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a35      	ldr	r2, [pc, #212]	; (8000a00 <MX_GPIO_Init+0x120>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_GPIO_Init+0x120>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x120>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x124>)
 800095c:	f001 fbc2 	bl	80020e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	210c      	movs	r1, #12
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000966:	f001 fbbd 	bl	80020e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, EN_Pin|STP_Pin|DIR_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f240 4103 	movw	r1, #1027	; 0x403
 8000970:	4826      	ldr	r0, [pc, #152]	; (8000a0c <MX_GPIO_Init+0x12c>)
 8000972:	f001 fbb7 	bl	80020e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, NG_Pin|NP_Pin|PG_Pin|PP_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800097c:	4823      	ldr	r0, [pc, #140]	; (8000a0c <MX_GPIO_Init+0x12c>)
 800097e:	f001 fbb1 	bl	80020e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Red_Pin */
	GPIO_InitStruct.Pin = Red_Pin;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Red_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	481a      	ldr	r0, [pc, #104]	; (8000a04 <MX_GPIO_Init+0x124>)
 800099c:	f001 fa1e 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a0:	230c      	movs	r3, #12
 80009a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <MX_GPIO_Init+0x128>)
 80009b8:	f001 fa10 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : EN_Pin STP_Pin DIR_Pin */
	GPIO_InitStruct.Pin = EN_Pin|STP_Pin|DIR_Pin;
 80009bc:	f240 4303 	movw	r3, #1027	; 0x403
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_GPIO_Init+0x12c>)
 80009d6:	f001 fa01 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : NG_Pin NP_Pin PG_Pin PP_Pin */
	GPIO_InitStruct.Pin = NG_Pin|NP_Pin|PG_Pin|PP_Pin;
 80009da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x12c>)
 80009f4:	f001 f9f2 	bl	8001ddc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_MspInit+0x60>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <HAL_MspInit+0x60>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_MspInit+0x60>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x60>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x60>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x60>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f001 f8ce 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x64>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_MspInit+0x64>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000

08000a84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <HAL_CAN_MspInit+0xc0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d14b      	bne.n	8000b3c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aae:	61d3      	str	r3, [r2, #28]
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_CAN_MspInit+0xc4>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <HAL_CAN_MspInit+0xc8>)
 8000aea:	f001 f977 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <HAL_CAN_MspInit+0xc8>)
 8000b04:	f001 f96a 	bl	8001ddc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_CAN_MspInit+0xcc>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_CAN_MspInit+0xcc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2014      	movs	r0, #20
 8000b32:	f001 f86a 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b36:	2014      	movs	r0, #20
 8000b38:	f001 f883 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40006400 	.word	0x40006400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	40010000 	.word	0x40010000

08000b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d114      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2019      	movs	r0, #25
 8000b84:	f001 f841 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b88:	2019      	movs	r0, #25
 8000b8a:	f001 f85a 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b8e:	e010      	b.n	8000bb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <HAL_TIM_Base_MspInit+0x70>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012c00 	.word	0x40012c00
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40000800 	.word	0x40000800

08000bc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be6:	d12c      	bne.n	8000c42 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	61d3      	str	r3, [r2, #28]
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c2c:	f001 f8d6 	bl	8001ddc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	201c      	movs	r0, #28
 8000c36:	f000 ffe8 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f001 f801 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c40:	e030      	b.n	8000ca4 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d12b      	bne.n	8000ca4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	61d3      	str	r3, [r2, #28]
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7c:	23c0      	movs	r3, #192	; 0xc0
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c90:	f001 f8a4 	bl	8001ddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	201d      	movs	r0, #29
 8000c9a:	f000 ffb6 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c9e:	201d      	movs	r0, #29
 8000ca0:	f000 ffcf 	bl	8001c42 <HAL_NVIC_EnableIRQ>
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <HAL_UART_MspInit+0x9c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d139      	bne.n	8000d4c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0xa0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <HAL_UART_MspInit+0xa4>)
 8000d1e:	f001 f85d 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_UART_MspInit+0xa4>)
 8000d38:	f001 f850 	bl	8001ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2025      	movs	r0, #37	; 0x25
 8000d42:	f000 ff62 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d46:	2025      	movs	r0, #37	; 0x25
 8000d48:	f000 ff7b 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f8a7 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000db6:	f000 fc2d 	bl	8001614 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000b0 	.word	0x200000b0

08000dc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM1_UP_IRQHandler+0x10>)
 8000dca:	f002 f809 	bl	8002de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000d8 	.word	0x200000d8

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f001 ffff 	bl	8002de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000120 	.word	0x20000120

08000dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM3_IRQHandler+0x10>)
 8000df2:	f001 fff5 	bl	8002de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000168 	.word	0x20000168

08000e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART1_IRQHandler+0x10>)
 8000e06:	f002 fc0b 	bl	8003620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200001f8 	.word	0x200001f8

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e46:	f7ff ffe5 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f003 f903 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fabf 	bl	80003d0 <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e5c:	080040e8 	.word	0x080040e8
  ldr r2, =_sbss
 8000e60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e64:	20000244 	.word	0x20000244

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 feb9 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fdc8 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fed1 	bl	8001c5e <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fe99 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000240 	.word	0x20000240

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000240 	.word	0x20000240

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffe0 	bl	8000f1c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000000c 	.word	0x2000000c

08000f78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0ed      	b.n	8001166 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fd74 	bl	8000a84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fac:	f7ff ffb6 	bl	8000f1c <HAL_GetTick>
 8000fb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb2:	e012      	b.n	8000fda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb4:	f7ff ffb2 	bl	8000f1c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d90b      	bls.n	8000fda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0c5      	b.n	8001166 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e5      	beq.n	8000fb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0202 	bic.w	r2, r2, #2
 8000ff6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff8:	f7ff ff90 	bl	8000f1c <HAL_GetTick>
 8000ffc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ffe:	e012      	b.n	8001026 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001000:	f7ff ff8c 	bl	8000f1c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b0a      	cmp	r3, #10
 800100c:	d90b      	bls.n	8001026 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2205      	movs	r2, #5
 800101e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e09f      	b.n	8001166 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e5      	bne.n	8001000 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7e1b      	ldrb	r3, [r3, #24]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7e5b      	ldrb	r3, [r3, #25]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e007      	b.n	8001088 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001086:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7e9b      	ldrb	r3, [r3, #26]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0220 	orr.w	r2, r2, #32
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0220 	bic.w	r2, r2, #32
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7edb      	ldrb	r3, [r3, #27]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d108      	bne.n	80010cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0210 	bic.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e007      	b.n	80010dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0210 	orr.w	r2, r2, #16
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7f1b      	ldrb	r3, [r3, #28]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0208 	orr.w	r2, r2, #8
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e007      	b.n	8001106 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0208 	bic.w	r2, r2, #8
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7f5b      	ldrb	r3, [r3, #29]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0204 	orr.w	r2, r2, #4
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e007      	b.n	8001130 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	ea42 0103 	orr.w	r1, r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	1e5a      	subs	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d003      	beq.n	8001194 <HAL_CAN_ConfigFilter+0x26>
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	2b02      	cmp	r3, #2
 8001190:	f040 80aa 	bne.w	80012e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2201      	movs	r2, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d123      	bne.n	8001216 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3248      	adds	r2, #72	; 0x48
 80011f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	3348      	adds	r3, #72	; 0x48
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d122      	bne.n	8001264 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	431a      	orrs	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800123e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3248      	adds	r2, #72	; 0x48
 8001244:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001258:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125a:	6979      	ldr	r1, [r7, #20]
 800125c:	3348      	adds	r3, #72	; 0x48
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800127e:	e007      	b.n	8001290 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012aa:	e007      	b.n	80012bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012da:	f023 0201 	bic.w	r2, r3, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e006      	b.n	80012f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
  }
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d12e      	bne.n	8001372 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800132c:	f7ff fdf6 	bl	8000f1c <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001332:	e012      	b.n	800135a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001334:	f7ff fdf2 	bl	8000f1c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b0a      	cmp	r3, #10
 8001340:	d90b      	bls.n	800135a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2205      	movs	r2, #5
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e012      	b.n	8001380 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e5      	bne.n	8001334 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e006      	b.n	8001380 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
  }
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d003      	beq.n	80013ac <HAL_CAN_GetRxMessage+0x24>
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	f040 8103 	bne.w	80015b2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10e      	bne.n	80013d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d116      	bne.n	80013ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0f7      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0e8      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	331b      	adds	r3, #27
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0204 	and.w	r2, r3, #4
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10c      	bne.n	8001426 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	331b      	adds	r3, #27
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0d5b      	lsrs	r3, r3, #21
 800141c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e00b      	b.n	800143e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	331b      	adds	r3, #27
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	331b      	adds	r3, #27
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0202 	and.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	3304      	adds	r3, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2208      	movs	r2, #8
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	e00b      	b.n	800148c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	331b      	adds	r3, #27
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 020f 	and.w	r2, r3, #15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0a1a      	lsrs	r2, r3, #8
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0c1a      	lsrs	r2, r3, #16
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3302      	adds	r3, #2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0e1a      	lsrs	r2, r3, #24
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3303      	adds	r3, #3
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3304      	adds	r3, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0a1a      	lsrs	r2, r3, #8
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3305      	adds	r3, #5
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0c1a      	lsrs	r2, r3, #16
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3306      	adds	r3, #6
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0e1a      	lsrs	r2, r3, #24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3307      	adds	r3, #7
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d108      	bne.n	800159e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0220 	orr.w	r2, r2, #32
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	e007      	b.n	80015ae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0220 	orr.w	r2, r2, #32
 80015ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <HAL_CAN_ActivateNotification+0x1e>
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d109      	bne.n	80015fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6959      	ldr	r1, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e006      	b.n	800160a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d07c      	beq.n	8001754 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f983 	bl	8001982 <HAL_CAN_TxMailbox0CompleteCallback>
 800167c:	e016      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	e00c      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	e002      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f986 	bl	80019b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d024      	beq.n	8001700 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f962 	bl	8001994 <HAL_CAN_TxMailbox1CompleteCallback>
 80016d0:	e016      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	e00c      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e002      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f965 	bl	80019ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f941 	bl	80019a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001724:	e016      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	e00c      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	e002      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f944 	bl	80019dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2208      	movs	r2, #8
 8001792:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f92a 	bl	80019ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fde6 	bl	8000384 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2208      	movs	r2, #8
 80017f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f90a 	bl	8001a12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8f2 	bl	8001a00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2210      	movs	r2, #16
 8001836:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f8f3 	bl	8001a24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8eb 	bl	8001a36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d07b      	beq.n	8001962 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d072      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d043      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03e      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018e2:	2b60      	cmp	r3, #96	; 0x60
 80018e4:	d02b      	beq.n	800193e <HAL_CAN_IRQHandler+0x32a>
 80018e6:	2b60      	cmp	r3, #96	; 0x60
 80018e8:	d82e      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018ea:	2b50      	cmp	r3, #80	; 0x50
 80018ec:	d022      	beq.n	8001934 <HAL_CAN_IRQHandler+0x320>
 80018ee:	2b50      	cmp	r3, #80	; 0x50
 80018f0:	d82a      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d019      	beq.n	800192a <HAL_CAN_IRQHandler+0x316>
 80018f6:	2b40      	cmp	r3, #64	; 0x40
 80018f8:	d826      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018fa:	2b30      	cmp	r3, #48	; 0x30
 80018fc:	d010      	beq.n	8001920 <HAL_CAN_IRQHandler+0x30c>
 80018fe:	2b30      	cmp	r3, #48	; 0x30
 8001900:	d822      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 8001902:	2b10      	cmp	r3, #16
 8001904:	d002      	beq.n	800190c <HAL_CAN_IRQHandler+0x2f8>
 8001906:	2b20      	cmp	r3, #32
 8001908:	d005      	beq.n	8001916 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800190a:	e01d      	b.n	8001948 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001914:	e019      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800191e:	e014      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001928:	e00f      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001932:	e00a      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193c:	e005      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001946:	e000      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            break;
 8001948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2204      	movs	r2, #4
 8001960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f867 	bl	8001a48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
	...

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4906      	ldr	r1, [pc, #24]	; (8001af4 <__NVIC_EnableIRQ+0x34>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff90 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff2d 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff42 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff90 	bl	8001b4c <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5f 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff35 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2204      	movs	r2, #4
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e020      	b.n	8001ce2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d005      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e051      	b.n	8001db4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <HAL_DMA_Abort_IT+0xd4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d029      	beq.n	8001d8e <HAL_DMA_Abort_IT+0xa2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_DMA_Abort_IT+0xd8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x9e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_DMA_Abort_IT+0xdc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x98>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_DMA_Abort_IT+0xe0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d012      	beq.n	8001d7e <HAL_DMA_Abort_IT+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_DMA_Abort_IT+0xe4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00a      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_DMA_Abort_IT+0xe8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <HAL_DMA_Abort_IT+0x86>
 8001d6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d70:	e00e      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d76:	e00b      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d7c:	e008      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	e005      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d88:	e002      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_DMA_Abort_IT+0xec>)
 8001d92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
    } 
  }
  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020008 	.word	0x40020008
 8001dc4:	4002001c 	.word	0x4002001c
 8001dc8:	40020030 	.word	0x40020030
 8001dcc:	40020044 	.word	0x40020044
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	4002006c 	.word	0x4002006c
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dee:	e169      	b.n	80020c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df0:	2201      	movs	r2, #1
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8158 	bne.w	80020be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a9a      	ldr	r2, [pc, #616]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a98      	ldr	r2, [pc, #608]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d875      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e1e:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d058      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e24:	4a96      	ldr	r2, [pc, #600]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d86f      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e2a:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d052      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e30:	4a94      	ldr	r2, [pc, #592]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d869      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e36:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04c      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d863      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e42:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d046      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e48:	4a90      	ldr	r2, [pc, #576]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d85d      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d82a      	bhi.n	8001ea8 <HAL_GPIO_Init+0xcc>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d859      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <HAL_GPIO_Init+0x80>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001ec3 	.word	0x08001ec3
 8001e68:	08001f05 	.word	0x08001f05
 8001e6c:	08001f0b 	.word	0x08001f0b
 8001e70:	08001f0b 	.word	0x08001f0b
 8001e74:	08001f0b 	.word	0x08001f0b
 8001e78:	08001f0b 	.word	0x08001f0b
 8001e7c:	08001f0b 	.word	0x08001f0b
 8001e80:	08001f0b 	.word	0x08001f0b
 8001e84:	08001f0b 	.word	0x08001f0b
 8001e88:	08001f0b 	.word	0x08001f0b
 8001e8c:	08001f0b 	.word	0x08001f0b
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001f0b 	.word	0x08001f0b
 8001e98:	08001f0b 	.word	0x08001f0b
 8001e9c:	08001f0b 	.word	0x08001f0b
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ecd 	.word	0x08001ecd
 8001ea8:	4a79      	ldr	r2, [pc, #484]	; (8002090 <HAL_GPIO_Init+0x2b4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eae:	e02c      	b.n	8001f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e029      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e024      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e01f      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e01a      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e013      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	611a      	str	r2, [r3, #16]
          break;
 8001ef6:	e009      	b.n	8001f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	615a      	str	r2, [r3, #20]
          break;
 8001f02:	e003      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          break;
 8001f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d801      	bhi.n	8001f16 <HAL_GPIO_Init+0x13a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_Init+0x13e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d802      	bhi.n	8001f28 <HAL_GPIO_Init+0x14c>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x152>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b08      	subs	r3, #8
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	210f      	movs	r1, #15
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80b1 	beq.w	80020be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <HAL_GPIO_Init+0x2c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1e0>
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e006      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e004      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fda:	492f      	ldr	r1, [pc, #188]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	492c      	ldr	r1, [pc, #176]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	4928      	ldr	r1, [pc, #160]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	491e      	ldr	r1, [pc, #120]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4918      	ldr	r1, [pc, #96]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4914      	ldr	r1, [pc, #80]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d021      	beq.n	80020b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e021      	b.n	80020be <HAL_GPIO_Init+0x2e2>
 800207a:	bf00      	nop
 800207c:	10320000 	.word	0x10320000
 8002080:	10310000 	.word	0x10310000
 8002084:	10220000 	.word	0x10220000
 8002088:	10210000 	.word	0x10210000
 800208c:	10120000 	.word	0x10120000
 8002090:	10110000 	.word	0x10110000
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40011400 	.word	0x40011400
 80020ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4909      	ldr	r1, [pc, #36]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f ae8e 	bne.w	8001df0 <HAL_GPIO_Init+0x14>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002100:	e003      	b.n	800210a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43d9      	mvns	r1, r3
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	400b      	ands	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e272      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8087 	beq.w	8002276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00c      	beq.n	800218e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06c      	beq.n	8002274 <HAL_RCC_OscConfig+0x12c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d168      	bne.n	8002274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e24c      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x76>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e02e      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xbc>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fe7a 	bl	8000f1c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe fe76 	bl	8000f1c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e200      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xe4>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fe66 	bl	8000f1c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe fe62 	bl	8000f1c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1ec      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x10c>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002282:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1c0      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4939      	ldr	r1, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fe1b 	bl	8000f1c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe fe17 	bl	8000f1c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1a1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fdfa 	bl	8000f1c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe fdf6 	bl	8000f1c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e180      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe fdda 	bl	8000f1c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe fdd6 	bl	8000f1c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e160      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 face 	bl	800292c <RCC_Delay>
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe fdc0 	bl	8000f1c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe fdbc 	bl	8000f1c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d908      	bls.n	80023c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e146      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420000 	.word	0x42420000
 80023bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e9      	bne.n	80023a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a6 	beq.w	8002526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b85      	ldr	r3, [pc, #532]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe fd7d 	bl	8000f1c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fd79 	bl	8000f1c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e103      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x334>
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x356>
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a60      	ldr	r2, [pc, #384]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe fd2d 	bl	8000f1c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fd29 	bl	8000f1c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0b1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd17 	bl	8000f1c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe fd13 	bl	8000f1c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e09b      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d061      	beq.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d146      	bne.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe fce7 	bl	8000f1c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe fce3 	bl	8000f1c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e06d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4921      	ldr	r1, [pc, #132]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	430b      	orrs	r3, r1
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fcb7 	bl	8000f1c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fcb3 	bl	8000f1c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
 80025d0:	e035      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fca0 	bl	8000f1c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fc9c 	bl	8000f1c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x498>
 80025fe:	e01e      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e019      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
 8002614:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x500>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d040      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e073      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4936      	ldr	r1, [pc, #216]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7fe fbee 	bl	8000f1c <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe fbea 	bl	8000f1c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e053      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d210      	bcs.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1cc>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fb4c 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	080040b4 	.word	0x080040b4
 8002818:	20000004 	.word	0x20000004
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x30>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x36>
 800284e:	e027      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	e027      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c5b      	lsrs	r3, r3, #17
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e004      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	613b      	str	r3, [r7, #16]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	693b      	ldr	r3, [r7, #16]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	080040cc 	.word	0x080040cc
 80028c0:	080040dc 	.word	0x080040dc
 80028c4:	003d0900 	.word	0x003d0900

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e0:	f7ff fff2 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	080040c4 	.word	0x080040c4

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002908:	f7ff ffde 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0adb      	lsrs	r3, r3, #11
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	080040c4 	.word	0x080040c4

0800292c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCC_Delay+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <RCC_Delay+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002948:	bf00      	nop
  }
  while (Delay --);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <RCC_Delay+0x1c>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000004 	.word	0x20000004
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f8e0 	bl	8000b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fc04 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_Base_Start+0x88>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00e      	beq.n	8002a50 <HAL_TIM_Base_Start+0x48>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIM_Base_Start+0x48>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_TIM_Base_Start+0x8c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_TIM_Base_Start+0x48>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <HAL_TIM_Base_Start+0x90>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d010      	beq.n	8002a84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	e007      	b.n	8002a84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d001      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e03a      	b.n	8002b2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_Base_Start_IT+0x98>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x58>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d009      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x58>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x58>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <HAL_TIM_Base_Start_IT+0xa0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d010      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	e007      	b.n	8002b28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800

08002b40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e093      	b.n	8002c7c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe f82d 	bl	8000bc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b84:	f023 0307 	bic.w	r3, r3, #7
 8002b88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f000 fb0d 	bl	80031b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002be0:	f023 030c 	bic.w	r3, r3, #12
 8002be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	011a      	lsls	r2, r3, #4
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	031b      	lsls	r3, r3, #12
 8002c10:	4313      	orrs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ca4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d110      	bne.n	8002cd6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cba:	7b7b      	ldrb	r3, [r7, #13]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e089      	b.n	8002dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	e031      	b.n	8002d3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d110      	bne.n	8002cfe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce2:	7b3b      	ldrb	r3, [r7, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e075      	b.n	8002dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cfc:	e01d      	b.n	8002d3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d0a:	7b7b      	ldrb	r3, [r7, #13]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d10:	7b3b      	ldrb	r3, [r7, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e05e      	b.n	8002dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d010      	beq.n	8002d68 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002d46:	e01f      	b.n	8002d88 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fb27 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0202 	orr.w	r2, r2, #2
 8002d64:	60da      	str	r2, [r3, #12]
      break;
 8002d66:	e02e      	b.n	8002dc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2104      	movs	r1, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fb17 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	60da      	str	r2, [r3, #12]
      break;
 8002d86:	e01e      	b.n	8002dc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fb07 	bl	80033a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb00 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0202 	orr.w	r2, r2, #2
 8002db2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0204 	orr.w	r2, r2, #4
 8002dc2:	60da      	str	r2, [r3, #12]
      break;
 8002dc4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0202 	mvn.w	r2, #2
 8002e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f9b4 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9a7 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fa8f 	bl	8000354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0204 	mvn.w	r2, #4
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f98a 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f97d 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fd fa65 	bl	8000354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0208 	mvn.w	r2, #8
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f960 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f953 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fd fa3b 	bl	8000354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0210 	mvn.w	r2, #16
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f936 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f929 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd fa11 	bl	8000354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0201 	mvn.w	r2, #1
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd f9ac 	bl	80002bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b80      	cmp	r3, #128	; 0x80
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa95 	bl	80034ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8f3 	bl	80031a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0220 	mvn.w	r2, #32
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa60 	bl	80034a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIM_ConfigClockSource+0x1c>
 8003008:	2302      	movs	r3, #2
 800300a:	e0b4      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x186>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d03e      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304a:	f200 8087 	bhi.w	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	f000 8086 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x172>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	d87f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b70      	cmp	r3, #112	; 0x70
 800305e:	d01a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xa6>
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d87b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b60      	cmp	r3, #96	; 0x60
 8003066:	d050      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x11a>
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d877      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b50      	cmp	r3, #80	; 0x50
 800306e:	d03c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xfa>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d873      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d058      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x13a>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d86f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d064      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d86b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d060      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d867      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d05a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	e062      	b.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	f000 f95e 	bl	8003366 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e04f      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030d4:	f000 f947 	bl	8003366 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e03c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f8be 	bl	8003278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2150      	movs	r1, #80	; 0x50
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f915 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 8003108:	e02c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	461a      	mov	r2, r3
 8003118:	f000 f8dc 	bl	80032d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f905 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 8003128:	e01c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f89e 	bl	8003278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f8f5 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 8003148:	e00c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f000 f8ec 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 800315a:	e003      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e000      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <TIM_Base_SetConfig+0xbc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a25      	ldr	r2, [pc, #148]	; (8003274 <TIM_Base_SetConfig+0xc0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <TIM_Base_SetConfig+0xb8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <TIM_Base_SetConfig+0xbc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <TIM_Base_SetConfig+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <TIM_Base_SetConfig+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800

08003278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0201 	bic.w	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 030a 	bic.w	r3, r3, #10
 80032b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	031b      	lsls	r3, r3, #12
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	f043 0307 	orr.w	r3, r3, #7
 8003354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003380:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003400:	2302      	movs	r3, #2
 8003402:	e046      	b.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d009      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e042      	b.n	8003564 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fbe0 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fd09 	bl	8003f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	d121      	bne.n	80035ca <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_UART_Transmit_IT+0x26>
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e01a      	b.n	80035cc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2221      	movs	r2, #33	; 0x21
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d112      	bne.n	8003616 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_UART_Receive_IT+0x26>
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e00b      	b.n	8003618 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	461a      	mov	r2, r3
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fab6 	bl	8003b7e <UART_Start_Receive_IT>
 8003612:	4603      	mov	r3, r0
 8003614:	e000      	b.n	8003618 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0ba      	sub	sp, #232	; 0xe8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800365e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x66>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fb93 	bl	8003daa <UART_Receive_IT>
      return;
 8003684:	e25b      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80de 	beq.w	800384c <HAL_UART_IRQHandler+0x22c>
 8003690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80d1 	beq.w	800384c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_UART_IRQHandler+0xae>
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0xf6>
 80036fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d011      	beq.n	8003746 <HAL_UART_IRQHandler+0x126>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0208 	orr.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 81f2 	beq.w	8003b34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_UART_IRQHandler+0x14e>
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fb1e 	bl	8003daa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_UART_IRQHandler+0x17a>
 8003792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04f      	beq.n	800383a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa28 	bl	8003bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d041      	beq.n	8003832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3314      	adds	r3, #20
 80037d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1d9      	bne.n	80037ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d013      	beq.n	800382a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	4a7e      	ldr	r2, [pc, #504]	; (8003a00 <HAL_UART_IRQHandler+0x3e0>)
 8003808:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fa6c 	bl	8001cec <HAL_DMA_Abort_IT>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003824:	4610      	mov	r0, r2
 8003826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e00e      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f993 	bl	8003b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e00a      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f98f 	bl	8003b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e006      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f98b 	bl	8003b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003846:	e175      	b.n	8003b34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	bf00      	nop
    return;
 800384a:	e173      	b.n	8003b34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 814f 	bne.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8148 	beq.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8141 	beq.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b6 	beq.w	8003a04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8145 	beq.w	8003b38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f080 813e 	bcs.w	8003b38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	f000 8088 	beq.w	80039e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003908:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1d9      	bne.n	80038d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800392c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003940:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003944:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003948:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e1      	bne.n	800391c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800397c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800397e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003982:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800398a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e3      	bne.n	8003958 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b0:	f023 0310 	bic.w	r3, r3, #16
 80039b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e3      	bne.n	800399e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe f94b 	bl	8001c76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8b6 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039fc:	e09c      	b.n	8003b38 <HAL_UART_IRQHandler+0x518>
 80039fe:	bf00      	nop
 8003a00:	08003cb5 	.word	0x08003cb5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808e 	beq.w	8003b3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8089 	beq.w	8003b3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	623b      	str	r3, [r7, #32]
   return(result);
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a86:	633a      	str	r2, [r7, #48]	; 0x30
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e3      	bne.n	8003a62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e3      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f83b 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af2:	e023      	b.n	8003b3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_UART_IRQHandler+0x4f4>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8e5 	bl	8003cdc <UART_Transmit_IT>
    return;
 8003b12:	e014      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_UART_IRQHandler+0x51e>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f924 	bl	8003d7a <UART_EndTransmit_IT>
    return;
 8003b32:	e004      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b34:	bf00      	nop
 8003b36:	e002      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b3c:	bf00      	nop
  }
}
 8003b3e:	37e8      	adds	r7, #232	; 0xe8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2222      	movs	r2, #34	; 0x22
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b095      	sub	sp, #84	; 0x54
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c18:	643a      	str	r2, [r7, #64]	; 0x40
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d119      	bne.n	8003c9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0310 	bic.w	r3, r3, #16
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c88:	61ba      	str	r2, [r7, #24]
 8003c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	613b      	str	r3, [r7, #16]
   return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003caa:	bf00      	nop
 8003cac:	3754      	adds	r7, #84	; 0x54
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff ff41 	bl	8003b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b21      	cmp	r3, #33	; 0x21
 8003cee:	d13e      	bne.n	8003d6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d114      	bne.n	8003d24 <UART_Transmit_IT+0x48>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d110      	bne.n	8003d24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	e008      	b.n	8003d36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6211      	str	r1, [r2, #32]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4619      	mov	r1, r3
 8003d44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fed2 	bl	8003b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08c      	sub	sp, #48	; 0x30
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b22      	cmp	r3, #34	; 0x22
 8003dbc:	f040 80ae 	bne.w	8003f1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	d117      	bne.n	8003dfa <UART_Receive_IT+0x50>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	1c9a      	adds	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
 8003df8:	e026      	b.n	8003e48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0c:	d007      	beq.n	8003e1e <UART_Receive_IT+0x74>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <UART_Receive_IT+0x82>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e008      	b.n	8003e3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4619      	mov	r1, r3
 8003e56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d15d      	bne.n	8003f18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0220 	bic.w	r2, r2, #32
 8003e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d135      	bne.n	8003f0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	623a      	str	r2, [r7, #32]
 8003eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69f9      	ldr	r1, [r7, #28]
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d10a      	bne.n	8003f00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fe2e 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
 8003f0c:	e002      	b.n	8003f14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc f962 	bl	80001d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e002      	b.n	8003f1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3730      	adds	r7, #48	; 0x30
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f62:	f023 030c 	bic.w	r3, r3, #12
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <UART_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fcb8 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	e002      	b.n	8003f9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7fe fca0 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003f9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <UART_SetConfig+0x118>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	0119      	lsls	r1, r3, #4
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <UART_SetConfig+0x118>)
 8003fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2064      	movs	r0, #100	; 0x64
 8003fde:	fb00 f303 	mul.w	r3, r0, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	4419      	add	r1, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009a      	lsls	r2, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	fbb2 f2f3 	udiv	r2, r2, r3
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <UART_SetConfig+0x118>)
 800400e:	fba3 0302 	umull	r0, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2064      	movs	r0, #100	; 0x64
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	; 0x32
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <UART_SetConfig+0x118>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	440a      	add	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40013800 	.word	0x40013800
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <memset>:
 8004044:	4603      	mov	r3, r0
 8004046:	4402      	add	r2, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2600      	movs	r6, #0
 8004058:	4d0c      	ldr	r5, [pc, #48]	; (800408c <__libc_init_array+0x38>)
 800405a:	4c0d      	ldr	r4, [pc, #52]	; (8004090 <__libc_init_array+0x3c>)
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	f000 f81a 	bl	800409c <_init>
 8004068:	2600      	movs	r6, #0
 800406a:	4d0a      	ldr	r5, [pc, #40]	; (8004094 <__libc_init_array+0x40>)
 800406c:	4c0a      	ldr	r4, [pc, #40]	; (8004098 <__libc_init_array+0x44>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	080040e0 	.word	0x080040e0
 8004090:	080040e0 	.word	0x080040e0
 8004094:	080040e0 	.word	0x080040e0
 8004098:	080040e4 	.word	0x080040e4

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
